Using testPong.db

	CREATE TABLE IF NOT EXISTS users (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		username TEXT NOT NULL UNIQUE,
		email TEXT NOT NULL UNIQUE,
		password_hash TEXT,
		avatar_url TEXT DEFAULT NULL,
		online_status BOOLEAN DEFAULT FALSE,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	)

PRAGMA table_info(users)
ALTER TABLE users ADD COLUMN two_fa_secret TEXT
ALTER TABLE users ADD COLUMN two_fa_enabled BOOLEAN DEFAULT 0
PRAGMA foreign_keys = ON

	CREATE TABLE IF NOT EXISTS players (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER,
		display_name TEXT NOT NULL UNIQUE,
		wins INTEGER DEFAULT 0,
		losses INTEGER DEFAULT 0,
		avatar_url TEXT DEFAULT NULL,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
	)


	CREATE TABLE IF NOT EXISTS friends (
		user_id INTEGER,
		friend_id INTEGER,
		status TEXT DEFAULT 'pending',
		PRIMARY KEY (user_id, friend_id),
		FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
		FOREIGN KEY (friend_id) REFERENCES users(id) ON DELETE CASCADE
	)


	CREATE TABLE IF NOT EXISTS tournaments (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER,
		name TEXT NOT NULL,
		status TEXT DEFAULT 'pending',
		current_round INTEGER DEFAULT 0,
		winner_id INTEGER,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		FOREIGN KEY (user_id) REFERENCES users(id)
		FOREIGN KEY (winner_id) REFERENCES players(id)
	)


	CREATE TABLE IF NOT EXISTS match_history (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER,
		type TEXT NOT NULL,
		tournament_id INTEGER DEFAULT NULL,
		round INTEGER,
		date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
		FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE
	)


	CREATE TABLE IF NOT EXISTS match_player_history (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		match_id INTEGER NOT NULL,
		player_id INTEGER NOT NULL,
		score INTEGER DEFAULT 0 NOT NULL,
		FOREIGN KEY (match_id) REFERENCES match_history(id) ON DELETE CASCADE,
		FOREIGN KEY (player_id) REFERENCES players(id),
		UNIQUE (match_id, player_id)
	)


	CREATE TABLE IF NOT EXISTS match_winner_history (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		match_id INTEGER NOT NULL,
		winner_id INTEGER NOT NULL,
		FOREIGN KEY (match_id) REFERENCES match_history(id) ON DELETE CASCADE,
		FOREIGN KEY (winner_id) REFERENCES players(id)
	)

TAP version 14
# Subtest: All Test
{"level":30,"time":1746643233351,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1","req":{"method":"GET","url":"/users","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users
    # Subtest: Auth Routes Suite
        # Subtest: GET `/users` returns empty array
            ok 1 - Status code 200
            ok 2 - should be equivalent
            1..2
        ok 1 - GET `/users` returns empty array # time=20.356ms
        
        # Subtest: POST `/register`
            # Subtest: returns 400 if email is missing
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 1 - returns 400 if email is missing # time=9.353ms
            
{"level":30,"time":1746643233356,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1","res":{"statusCode":200},"responseTime":4.437872886657715,"msg":"request completed"}
{"level":30,"time":1746643233366,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643233369,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2","res":{"statusCode":400},"err":{"type":"Error","message":"body must have required property 'email'","stack":"Error: body must have required property 'email'\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"","schemaPath":"#/required","keyword":"required","params":{"missingProperty":"email"},"message":"must have required property 'email'"}],"validationContext":"body"},"msg":"body must have required property 'email'"}
{"level":30,"time":1746643233370,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2","res":{"statusCode":400},"responseTime":3.9839534759521484,"msg":"request completed"}
{"level":30,"time":1746643233372,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
            # Subtest: returns 400 if invalid email
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 2 - returns 400 if invalid email # time=2.247ms
            
{"level":30,"time":1746643233373,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3","res":{"statusCode":400},"err":{"type":"Error","message":"body/email must match format \"email\"","stack":"Error: body/email must match format \"email\"\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/email","schemaPath":"#/properties/email/format","keyword":"format","params":{"format":"email"},"message":"must match format \"email\""}],"validationContext":"body"},"msg":"body/email must match format \"email\""}
{"level":30,"time":1746643233373,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3","res":{"statusCode":400},"responseTime":1.1885881423950195,"msg":"request completed"}
{"level":30,"time":1746643233374,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-4","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
            # Subtest: returns 400 if username < 3 chars
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 3 - returns 400 if username < 3 chars # time=1.65ms
            
{"level":30,"time":1746643233375,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-4","res":{"statusCode":400},"err":{"type":"Error","message":"body/username must NOT have fewer than 3 characters","stack":"Error: body/username must NOT have fewer than 3 characters\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/username","schemaPath":"#/properties/username/minLength","keyword":"minLength","params":{"limit":3},"message":"must NOT have fewer than 3 characters"}],"validationContext":"body"},"msg":"body/username must NOT have fewer than 3 characters"}
{"level":30,"time":1746643233375,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-4","res":{"statusCode":400},"responseTime":0.5646142959594727,"msg":"request completed"}
{"level":30,"time":1746643233376,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-5","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
            # Subtest: returns 400 if username is missing
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 4 - returns 400 if username is missing # time=1.698ms
            
{"level":30,"time":1746643233377,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-5","res":{"statusCode":400},"err":{"type":"Error","message":"body must have required property 'username'","stack":"Error: body must have required property 'username'\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"","schemaPath":"#/required","keyword":"required","params":{"missingProperty":"username"},"message":"must have required property 'username'"}],"validationContext":"body"},"msg":"body must have required property 'username'"}
{"level":30,"time":1746643233377,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-5","res":{"statusCode":400},"responseTime":0.5717010498046875,"msg":"request completed"}
{"level":30,"time":1746643233379,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-6","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
            # Subtest: returns 400 if password is missing
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 5 - returns 400 if password is missing # time=1.633ms
            
{"level":30,"time":1746643233379,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-6","res":{"statusCode":400},"err":{"type":"Error","message":"body must have required property 'password'","stack":"Error: body must have required property 'password'\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"","schemaPath":"#/required","keyword":"required","params":{"missingProperty":"password"},"message":"must have required property 'password'"}],"validationContext":"body"},"msg":"body must have required property 'password'"}
{"level":30,"time":1746643233379,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-6","res":{"statusCode":400},"responseTime":0.5385894775390625,"msg":"request completed"}
{"level":30,"time":1746643233381,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-7","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
            # Subtest: returns 400 if invalid password
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 6 - returns 400 if invalid password # time=4.012ms
            
{"level":30,"time":1746643233383,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-7","res":{"statusCode":400},"err":{"type":"Error","message":"body/password must NOT have fewer than 6 characters","stack":"Error: body/password must NOT have fewer than 6 characters\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/password","schemaPath":"#/properties/password/minLength","keyword":"minLength","params":{"limit":6},"message":"must NOT have fewer than 6 characters"}],"validationContext":"body"},"msg":"body/password must NOT have fewer than 6 characters"}
{"level":30,"time":1746643233383,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-7","res":{"statusCode":400},"responseTime":2.911837577819824,"msg":"request completed"}
{"level":30,"time":1746643233385,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-8","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
INSERT INTO users (username, email, password_hash) VALUES ('testuser', 'testuse@email.com', '$2b$10$Uo2MMomiFH38VV/SbxMSueuZ2'/*+28 bytes*/)
SELECT id, username, email FROM users WHERE id = 1.0
{"level":50,"time":1746643233525,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-8","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"res":{"statusCode":500},"err":{"type":"Error","message":"\"online_status\" is required!","stack":"Error: \"online_status\" is required!\n    at anonymous1 (eval at build (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fast-json-stringify/index.js:207:23), <anonymous>:90:15)\n    at anonymous0 (eval at build (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fast-json-stringify/index.js:207:23), <anonymous>:175:17)\n    at serialize (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:939:12)\n    at preSerializationHookEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:519:17)\n    at preSerializationHook (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:503:5)\n    at Reply.send (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:206:7)\n    at Object.createUser (file:///home/vvaalant/Documents/ring7/new2/backend/controllers/authController.js:129:32)","serialization":{"url":"/register","method":"POST"}},"msg":"\"online_status\" is required!"}
            # Subtest: returns 201 if successfully created user
                not ok 1 - Status code 201
                  ---
                  compare: ===
                  at:
                    fileName: tests/auth.test.js
                    lineNumber: 85
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/auth.test.js:85:19)
                  source: |2
                                        email: 'testuse@email.com',
                                    });
                                    t.equal(response.statusCode, 201, 'Status code 201');
                    ------------------^
                                    t.equal(response.json().message, "User created successfully");
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,1 +1,1 @@
                    -201
                    +500
                  ...
                
                not ok 2 - should be equal
                  ---
                  compare: ===
                  at:
                    fileName: tests/auth.test.js
                    lineNumber: 86
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/auth.test.js:86:19)
                  source: |2
                                    });
                                    t.equal(response.statusCode, 201, 'Status code 201');
                                    t.equal(response.json().message, "User created successfully");
                    ------------------^
                  
                                    // Verify the user exists in DB
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,1 +1,1 @@
                    -User created successfully
                    +"online_status" is required!
                  ...
                
SELECT * FROM users
                ok 3 - Status code 200
                ok 4 - One user in the database
                not ok 5 - should be equivalent
                  ---
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,2 +1,3 @@
                     Object {
                    +  "two_fa_enabled": false,
                     }
                  at:
                    fileName: tests/auth.test.js
                    lineNumber: 93
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/auth.test.js:93:19)
                  source: |2
                                    const users = await response.json();
                                    t.equal(users.length, 1, 'One user in the database');
                                    t.same(users[0], {
                    ------------------^
                                        id: 1,
                                        username: 'testuser',
                  ...
                
                1..5
            not ok 7 - returns 201 if successfully created user # time=177.09ms
              ---
              at:
                fileName: tests/auth.test.js
                lineNumber: 79
                columnNumber: 15
                typeName: Test
              source: |2
              
                            // Test: Successful registration
                            t.test('returns 201 if successfully created user', async (t) => {
                --------------^
                                let response = await registerResponse(app, {
                                    username: 'testuser',
              ...
            
{"level":30,"time":1746643233525,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-8","res":{"statusCode":500},"responseTime":140.080491065979,"msg":"request completed"}
{"level":30,"time":1746643233553,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-9","req":{"method":"GET","url":"/users","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643233553,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-9","res":{"statusCode":200},"responseTime":0.7794895172119141,"msg":"request completed"}
{"level":30,"time":1746643233566,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-a","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
INSERT INTO users (username, email, password_hash) VALUES ('testuser', 'new@email.com', '$2b$10$psHkmafrS4xOEUyCUYz49uQcs'/*+28 bytes*/)
{"level":30,"time":1746643233672,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-a","res":{"statusCode":409},"responseTime":106.38567161560059,"msg":"request completed"}
            # Subtest: returns 400 if duplicate name
                ok 1 - Status code 409
                ok 2 - should be equal
                1..2
            ok 8 - returns 400 if duplicate name # time=107.564ms
            
{"level":30,"time":1746643233674,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-b","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
INSERT INTO users (username, email, password_hash) VALUES ('newuser', 'testuse@email.com', '$2b$10$6RdAkst5137mUeL2yno9seV74'/*+28 bytes*/)
{"level":30,"time":1746643233780,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-b","res":{"statusCode":409},"responseTime":106.36347103118896,"msg":"request completed"}
            # Subtest: returns 400 if duplicate email
                ok 1 - Status code 409
                ok 2 - should be equal
                1..2
            ok 9 - returns 400 if duplicate email # time=107.572ms
            
{"level":30,"time":1746643233782,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-c","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
INSERT INTO users (username, email, password_hash) VALUES ('kim', 'kim@email.com', '$2b$10$y88JsRFG2B/G0Dnr0I0fCugfh'/*+28 bytes*/)
SELECT id, username, email FROM users WHERE id = 2.0
{"level":50,"time":1746643233893,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-c","req":{"method":"POST","url":"/register","host":"localhost:80","remoteAddress":"127.0.0.1"},"res":{"statusCode":500},"err":{"type":"Error","message":"\"online_status\" is required!","stack":"Error: \"online_status\" is required!\n    at anonymous1 (eval at build (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fast-json-stringify/index.js:207:23), <anonymous>:90:15)\n    at anonymous0 (eval at build (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fast-json-stringify/index.js:207:23), <anonymous>:175:17)\n    at serialize (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:939:12)\n    at preSerializationHookEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:519:17)\n    at preSerializationHook (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:503:5)\n    at Reply.send (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:206:7)\n    at Object.createUser (file:///home/vvaalant/Documents/ring7/new2/backend/controllers/authController.js:129:32)","serialization":{"url":"/register","method":"POST"}},"msg":"\"online_status\" is required!"}
            # Subtest: returns 201 if successfully created another user
                not ok 1 - Status code 201
                  ---
                  compare: ===
                  at:
                    fileName: tests/auth.test.js
                    lineNumber: 132
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/auth.test.js:132:19)
                  source: |2
                                        email: 'kim@email.com',
                                    });
                                    t.equal(response.statusCode, 201, 'Status code 201');
                    ------------------^
                                    t.equal(response.json().message, "User created successfully");
                                });
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,1 +1,1 @@
                    -201
                    +500
                  ...
                
                not ok 2 - should be equal
                  ---
                  compare: ===
                  at:
                    fileName: tests/auth.test.js
                    lineNumber: 133
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/auth.test.js:133:19)
                  source: |2
                                    });
                                    t.equal(response.statusCode, 201, 'Status code 201');
                                    t.equal(response.json().message, "User created successfully");
                    ------------------^
                                });
                            });
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,1 +1,1 @@
                    -User created successfully
                    +"online_status" is required!
                  ...
                
                1..2
            not ok 10 - returns 201 if successfully created another user # time=124.395ms
              ---
              at:
                fileName: tests/auth.test.js
                lineNumber: 126
                columnNumber: 15
                typeName: Test
              source: >2
              
                            // Register a second valid user
                            t.test('returns 201 if successfully created another user', async (t) => {
                --------------^
                                const response = await registerResponse(app, {
                                    username: 'kim',
              ...
            
            1..10
        not ok 2 - POST `/register` # time=548.746ms
          ---
          at:
            fileName: tests/auth.test.js
            lineNumber: 16
            columnNumber: 11
            typeName: Test
          source: |2
          
                    // Group of tests related to user registration
                    t.test('POST `/register`', async(t) => {
            ----------^
          
                        // Test: Missing email
          ...
        
{"level":30,"time":1746643233893,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-c","res":{"statusCode":500},"responseTime":111.05445861816406,"msg":"request completed"}
{"level":30,"time":1746643233918,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-d","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: POST `/login`
            # Subtest: returns 400 if username is missing
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 1 - returns 400 if username is missing # time=5.795ms
            
{"level":30,"time":1746643233918,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-d","res":{"statusCode":400},"err":{"type":"Error","message":"body must have required property 'username'","stack":"Error: body must have required property 'username'\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"","schemaPath":"#/required","keyword":"required","params":{"missingProperty":"username"},"message":"must have required property 'username'"}],"validationContext":"body"},"msg":"body must have required property 'username'"}
{"level":30,"time":1746643233919,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-d","res":{"statusCode":400},"responseTime":0.9537029266357422,"msg":"request completed"}
{"level":30,"time":1746643233921,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-e","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
            # Subtest: returns 400 if password is missing
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 2 - returns 400 if password is missing # time=1.687ms
            
{"level":30,"time":1746643233921,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-e","res":{"statusCode":400},"err":{"type":"Error","message":"body must have required property 'password'","stack":"Error: body must have required property 'password'\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"","schemaPath":"#/required","keyword":"required","params":{"missingProperty":"password"},"message":"must have required property 'password'"}],"validationContext":"body"},"msg":"body must have required property 'password'"}
{"level":30,"time":1746643233921,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-e","res":{"statusCode":400},"responseTime":0.5746259689331055,"msg":"request completed"}
{"level":30,"time":1746643233923,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-f","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'nonexistentuser'
            # Subtest: returns 401 if user not found
                ok 1 - Status code 401
                ok 2 - should be equal
                1..2
            ok 3 - returns 401 if user not found # time=1.86ms
            
{"level":30,"time":1746643233923,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-f","res":{"statusCode":401},"responseTime":0.8538236618041992,"msg":"request completed"}
{"level":30,"time":1746643233925,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-g","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'kim'
{"level":30,"time":1746643234032,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-g","res":{"statusCode":401},"responseTime":107.50790786743164,"msg":"request completed"}
            # Subtest: returns 401 if password is incorrect
                ok 1 - Status code 401
                ok 2 - should be equal
                1..2
            ok 4 - returns 401 if password is incorrect # time=108.567ms
            
{"level":30,"time":1746643234034,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-h","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'kim'
SELECT two_fa_enabled FROM users WHERE id = 2.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 2.0
            AND online_status = FALSE
        
{"level":30,"time":1746643234146,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-h","res":{"statusCode":200},"responseTime":111.90178489685059,"msg":"request completed"}
            # Subtest: returns 200 if login is successful
                ok 1 - Status code 200
                ok 2 - Token is present
                ok 3 - should be equivalent
SELECT * FROM users WHERE id = 2.0
                ok 4 - Status code 200
                not ok 5 - should be equivalent
                  ---
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,2 +1,3 @@
                     Object {
                    +  "two_fa_enabled": false,
                     }
                  at:
                    fileName: tests/auth.test.js
                    lineNumber: 190
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/auth.test.js:190:19)
                  source: |2
                                    t.equal(response.statusCode, 200, 'Status code 200');
                                    const user = await response.json();
                                    t.same(user, {
                    ------------------^
                                        id: 2,
                                        username: 'kim',
                  ...
                
SELECT COUNT(*) AS count FROM users WHERE id = 2.0
UPDATE users
            SET online_status = FALSE
            WHERE id = 2.0
            AND online_status = TRUE
        
                # Subtest: POST `/logout`
                    # Subtest: returns 200 if logout is successful
                        ok 1 - Status code 200
                        ok 2 - should be equal
SELECT * FROM users WHERE id = 2.0
                        ok 3 - Status code 200
                        not ok 4 - should be equivalent
                          ---
                          diff: |
                            --- expected
                            +++ actual
                            @@ -1,2 +1,3 @@
                             Object {
                            +  "two_fa_enabled": false,
                             }
                          at:
                            fileName: tests/auth.test.js
                            lineNumber: 212
                            columnNumber: 27
                            typeName: Test
                          stack: |
                            Test.<anonymous> (tests/auth.test.js:212:27)
                          source: |2
                                                    t.equal(response.statusCode, 200, 'Status code 200');
                                                    const user = await response.json();
                                                    t.same(user, {
                            --------------------------^
                                                        id: 2,
                                                        username: 'kim',
                          ...
                        
                        1..4
                    not ok 1 - returns 200 if logout is successful # time=17.89ms
                      ---
                      at:
                        fileName: tests/auth.test.js
                        lineNumber: 203
                        columnNumber: 23
                        typeName: Test
                      source: >2
                      
                                            // Test: Successful logout
                                            t.test('returns 200 if logout is successful', async (t) => {
                        ----------------------^
                                                let response = await logoutResponse(app, authToken);
                                                t.equal(response.statusCode, 200, 'Status code 200');
                      ...
                    
SELECT COUNT(*) AS count FROM users WHERE id = 2.0
UPDATE users
            SET online_status = FALSE
            WHERE id = 2.0
            AND online_status = TRUE
        
                    # Subtest: returns 400 if user already logged out
                        ok 1 - Status code 404
                        ok 2 - should be equal
                        1..2
                    ok 2 - returns 400 if user already logged out # time=3.003ms
                    
                    1..2
                not ok 6 - POST `/logout` # time=26.776ms
                  ---
                  at:
                    fileName: tests/auth.test.js
                    lineNumber: 200
                    columnNumber: 19
                    typeName: Test
                  source: |2
                  
                                    // Logout Tests
                                    t.test('POST `/logout`', async (t) => {
                    ------------------^
                  
                                        // Test: Successful logout
                  ...
                
                1..6
            not ok 5 - returns 200 if login is successful # time=151.639ms
              ---
              at:
                fileName: tests/auth.test.js
                lineNumber: 175
                columnNumber: 15
                typeName: Test
              source: >2
              
                            // Test: Successful login and set online_status
                            t.test('returns 200 if login is successful', async (t) => {
                --------------^
                                let response = await loginResponse(app, { username: 'kim', password: 'password' });
                                const authToken = response.json().token;
              ...
            
            1..5
        not ok 3 - POST `/login` # time=275.913ms
          ---
          at:
            fileName: tests/auth.test.js
            lineNumber: 138
            columnNumber: 11
            typeName: Test
          source: |2
          
                    // Group of tests related to user login
                    t.test('POST `/login`', async (t) => {
            ----------^
          
                        // Test: Missing username
          ...
        
        1..3
    not ok 1 - Auth Routes Suite # time=853.085ms
      ---
      at:
        fileName: tests/auth.test.js
        lineNumber: 6
        columnNumber: 7
        functionName: runAuthTests
        isToplevel: true
      source: |
        // Group of tests for Auth routes
        function runAuthTests(app, t) {
            t.test('Auth Routes Suite', async (t) => {
        ------^
      
                // Test that initially, the users list is empty
      ...
    
SELECT * FROM users
    # Subtest: User Routes Suite
        # Subtest: GET `/users` returns two users
            ok 1 - Status code 200
            ok 2 - Two user in the database
            not ok 3 - should be equivalent
              ---
              diff: |
                --- expected
                +++ actual
                @@ -1,2 +1,3 @@
                 Object {
                +  "two_fa_enabled": false,
                 }
              at:
                fileName: tests/user.test.js
                lineNumber: 15
                columnNumber: 15
                typeName: Test
              stack: |
                Test.<anonymous> (tests/user.test.js:15:15)
              source: |2
                            const users = await response.json();
                            t.equal(users.length, 2, 'Two user in the database');
                            t.same(users[0], {
                --------------^
                                id: 1,
                                username: 'testuser',
              ...
            
            not ok 4 - should be equivalent
              ---
              diff: |
                --- expected
                +++ actual
                @@ -1,2 +1,3 @@
                 Object {
                +  "two_fa_enabled": false,
                 }
              at:
                fileName: tests/user.test.js
                lineNumber: 23
                columnNumber: 15
                typeName: Test
              stack: |
                Test.<anonymous> (tests/user.test.js:23:15)
              source: |2
                                created_at: users[0].created_at,
                            });
                            t.same(users[1], {
                --------------^
                                id: 2,
                                username: 'kim',
              ...
            
            1..4
        not ok 1 - GET `/users` returns two users # time=15.691ms
          ---
          at:
            fileName: tests/user.test.js
            lineNumber: 9
            columnNumber: 11
            typeName: Test
          source: |2
          
                    // Test retrieving all users
                    t.test('GET `/users` returns two users', async (t) => {
            ----------^
                        const response = await getUsersResponse(app);
                        t.equal(response.statusCode, 200, 'Status code 200');
          ...
        
SELECT * FROM users WHERE id = 2.0
        # Subtest: GET `/users/:id` returns second user
            ok 1 - Status code 200
            not ok 2 - should be equivalent
              ---
              diff: |
                --- expected
                +++ actual
                @@ -1,2 +1,3 @@
                 Object {
                +  "two_fa_enabled": false,
                 }
              at:
                fileName: tests/user.test.js
                lineNumber: 39
                columnNumber: 15
                typeName: Test
              stack: |
                Test.<anonymous> (tests/user.test.js:39:15)
              source: |2
              
                            const user = await response.json();
                            t.same(user, {
                --------------^
                                id: 2,
                                username: 'kim',
              ...
            
            1..2
        not ok 2 - GET `/users/:id` returns second user # time=5.52ms
          ---
          at:
            fileName: tests/user.test.js
            lineNumber: 34
            columnNumber: 11
            typeName: Test
          source: |2
          
                    // Test retrieving a single user by ID
                    t.test('GET `/users/:id` returns second user', async (t) => {
            ----------^
                        const response = await getUserResponse(app, 2);
                        t.equal(response.statusCode, 200, 'Status code 200');
          ...
        
SELECT * FROM users WHERE id = 3.0
        # Subtest: GET `/users/:id` returns 404 user not found
            ok 1 - Status code 404
            ok 2 - should be equal
            1..2
        ok 3 - GET `/users/:id` returns 404 user not found # time=1.464ms
        
{"level":30,"time":1746643234147,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-i","req":{"method":"GET","url":"/users/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234148,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-i","res":{"statusCode":200},"responseTime":1.0008773803710938,"msg":"request completed"}
{"level":30,"time":1746643234156,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-j","req":{"method":"POST","url":"/logout","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234163,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-j","res":{"statusCode":200},"responseTime":7.461901664733887,"msg":"request completed"}
{"level":30,"time":1746643234165,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-k","req":{"method":"GET","url":"/users/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234165,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-k","res":{"statusCode":200},"responseTime":0.551762580871582,"msg":"request completed"}
{"level":30,"time":1746643234178,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-l","req":{"method":"POST","url":"/logout","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234179,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-l","res":{"statusCode":404},"responseTime":0.7957859039306641,"msg":"request completed"}
{"level":30,"time":1746643234202,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-m","req":{"method":"GET","url":"/users","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234202,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-m","res":{"statusCode":200},"responseTime":0.5994014739990234,"msg":"request completed"}
{"level":30,"time":1746643234215,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-n","req":{"method":"GET","url":"/users/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234215,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-n","res":{"statusCode":200},"responseTime":0.5117816925048828,"msg":"request completed"}
{"level":30,"time":1746643234223,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-o","req":{"method":"GET","url":"/users/3","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234223,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-o","res":{"statusCode":404},"responseTime":0.5155200958251953,"msg":"request completed"}
{"level":30,"time":1746643234224,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-p","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'testuser'
SELECT two_fa_enabled FROM users WHERE id = 1.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 1.0
            AND online_status = FALSE
        
{"level":30,"time":1746643234335,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-p","res":{"statusCode":200},"responseTime":110.98311996459961,"msg":"request completed"}
{"level":30,"time":1746643234338,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-q","req":{"method":"PUT","url":"/users/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: PUT `/users/:id`
            # Subtest: PUT `/users/2` returns 403 if unauthoritized
                ok 1 - Status code 403
                ok 2 - should be equal
                1..2
            ok 1 - PUT `/users/2` returns 403 if unauthoritized # time=3.563ms
            
{"level":30,"time":1746643234339,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-q","res":{"statusCode":403},"responseTime":1.2853031158447266,"msg":"request completed"}
{"level":30,"time":1746643234340,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-r","req":{"method":"PUT","url":"/users/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE id = 1.0
SELECT * FROM users WHERE username = 'kim'
            # Subtest: PUT `/users/1` returns 400 if username already taken
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 2 - PUT `/users/1` returns 400 if username already taken # time=2.12ms
            
{"level":30,"time":1746643234341,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-r","res":{"statusCode":400},"responseTime":1.0412101745605469,"msg":"request completed"}
{"level":30,"time":1746643234343,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-s","req":{"method":"PUT","url":"/users/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE id = 1.0
SELECT * FROM users WHERE email = 'kim@email.com'
            # Subtest: PUT `/users/1` returns 400 if email already in use
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 3 - PUT `/users/1` returns 400 if email already in use # time=1.967ms
            
{"level":30,"time":1746643234344,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-s","res":{"statusCode":400},"responseTime":0.9335451126098633,"msg":"request completed"}
{"level":30,"time":1746643234345,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-t","req":{"method":"PUT","url":"/users/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE id = 1.0
SELECT * FROM users WHERE email = 'new@email.com'

            UPDATE users
            SET username = 'testuser', password_hash = '$2b$10$Uo2MMomiFH38VV/SbxMSueuZ2'/*+28 bytes*/, email = 'new@email.com', avatar_url = NULL
            WHERE id = 1.0
        
            # Subtest: PUT `/users/1` returns 200 if email updated
                not ok 1 - Status code 200
                  ---
                  compare: ===
                  at:
                    fileName: tests/user.test.js
                    lineNumber: 85
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/user.test.js:85:19)
                  source: >2
                                t.test('PUT `/users/1` returns 200 if email updated', async (t) => {
                                    const response = await updateUserResponse(app, 1, authToken, { email: "new@email.com" });
                                    t.equal(response.statusCode, 200, 'Status code 200');
                    ------------------^
                  
                                    const data = await response.json();
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,1 +1,1 @@
                    -200
                    +500
                  ...
                
                not ok 2 - should be equal
                  ---
                  compare: ===
                  at:
                    fileName: tests/user.test.js
                    lineNumber: 88
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/user.test.js:88:19)
                  source: |2
                  
                                    const data = await response.json();
                                    t.equal(data.message, 'User updated successfully');
                    ------------------^
                                    t.same(data.item, {
                                        username: 'testuser',
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,1 +1,1 @@
                    -User updated successfully
                    +"id" is required!
                  ...
                
                not ok 3 - should be equivalent
                  ---
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,5 +1,1 @@
                    -Object {
                    -  "username": "testuser",
                    -  "email": "new@email.com",
                    -  "avatar_url": "",
                    -}
                    +undefined
                  at:
                    fileName: tests/user.test.js
                    lineNumber: 89
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/user.test.js:89:19)
                  source: |2
                                    const data = await response.json();
                                    t.equal(data.message, 'User updated successfully');
                                    t.same(data.item, {
                    ------------------^
                                        username: 'testuser',
                                        email: 'new@email.com',
                  ...
                
                1..3
            not ok 4 - PUT `/users/1` returns 200 if email updated # time=22.282ms
              ---
              at:
                fileName: tests/user.test.js
                lineNumber: 83
                columnNumber: 15
                typeName: Test
              source: >2
              
                            // Test successful email update
                            t.test('PUT `/users/1` returns 200 if email updated', async (t) => {
                --------------^
                                const response = await updateUserResponse(app, 1, authToken, { email: "new@email.com" });
                                t.equal(response.statusCode, 200, 'Status code 200');
              ...
            
{"level":50,"time":1746643234351,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-t","req":{"method":"PUT","url":"/users/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"res":{"statusCode":500},"err":{"type":"Error","message":"\"id\" is required!","stack":"Error: \"id\" is required!\n    at anonymous1 (eval at build (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fast-json-stringify/index.js:207:23), <anonymous>:35:15)\n    at anonymous0 (eval at build (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fast-json-stringify/index.js:207:23), <anonymous>:175:17)\n    at serialize (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:939:12)\n    at preSerializationHookEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:519:17)\n    at preSerializationHook (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:503:5)\n    at Reply.send (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:206:7)\n    at Object.updateUser (file:///home/vvaalant/Documents/ring7/new2/backend/controllers/userController.js:84:22)\n    at preHandlerCallbackInner (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:161:24)\n    at preHandlerCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:129:5)\n    at validationCompleted (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:119:5)","serialization":{"url":"/users/:id","method":"PUT"}},"msg":"\"id\" is required!"}
{"level":30,"time":1746643234351,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-t","res":{"statusCode":500},"responseTime":5.943268775939941,"msg":"request completed"}
{"level":30,"time":1746643234370,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-u","req":{"method":"PUT","url":"/users/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE id = 1.0
SELECT * FROM users WHERE username = 'lumi'

            UPDATE users
            SET username = 'lumi', password_hash = '$2b$10$Uo2MMomiFH38VV/SbxMSueuZ2'/*+28 bytes*/, email = 'new@email.com', avatar_url = 'newlink.com'
            WHERE id = 1.0
        
            # Subtest: PUT `/users/1` returns 200 if username and avatar_url updated
                not ok 1 - Status code 200
                  ---
                  compare: ===
                  at:
                    fileName: tests/user.test.js
                    lineNumber: 99
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/user.test.js:99:19)
                  source: >2
                                t.test('PUT `/users/1` returns 200 if username and avatar_url updated', async (t) => {
                                    let response = await updateUserResponse(app, 1, authToken, { username: 'lumi', avatar_url: 'newlink.com' });
                                    t.equal(response.statusCode, 200, 'Status code 200');
                    ------------------^
                  
                                    let data = await response.json();
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,1 +1,1 @@
                    -200
                    +500
                  ...
                
                not ok 2 - should be equal
                  ---
                  compare: ===
                  at:
                    fileName: tests/user.test.js
                    lineNumber: 102
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/user.test.js:102:19)
                  source: |2
                  
                                    let data = await response.json();
                                    t.equal(data.message, 'User updated successfully');
                    ------------------^
                                    t.same(data.item, {
                                        username: 'lumi',
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,1 +1,1 @@
                    -User updated successfully
                    +"id" is required!
                  ...
                
                not ok 3 - should be equivalent
                  ---
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,5 +1,1 @@
                    -Object {
                    -  "username": "lumi",
                    -  "email": "new@email.com",
                    -  "avatar_url": "newlink.com",
                    -}
                    +undefined
                  at:
                    fileName: tests/user.test.js
                    lineNumber: 103
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/user.test.js:103:19)
                  source: |2
                                    let data = await response.json();
                                    t.equal(data.message, 'User updated successfully');
                                    t.same(data.item, {
                    ------------------^
                                        username: 'lumi',
                                        email: 'new@email.com',
                  ...
                
SELECT * FROM users WHERE id = 1.0
                ok 4 - Status code 200
                not ok 5 - should be equivalent
                  ---
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,2 +1,3 @@
                     Object {
                    +  "two_fa_enabled": false,
                     }
                  at:
                    fileName: tests/user.test.js
                    lineNumber: 113
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/user.test.js:113:19)
                  source: |2
                  
                                    const user = await response.json();
                                    t.same(user, {
                    ------------------^
                                        id: 1,
                                        username: 'lumi',
                  ...
                
                1..5
            not ok 5 - PUT `/users/1` returns 200 if username and avatar_url updated # time=28.162ms
              ---
              at:
                fileName: tests/user.test.js
                lineNumber: 97
                columnNumber: 15
                typeName: Test
              source: >2
              
                            // Test successful update of username and avatar_url
                            t.test('PUT `/users/1` returns 200 if username and avatar_url updated', async (t) => {
                --------------^
                                let response = await updateUserResponse(app, 1, authToken, { username: 'lumi', avatar_url: 'newlink.com' });
                                t.equal(response.statusCode, 200, 'Status code 200');
              ...
            
{"level":50,"time":1746643234377,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-u","req":{"method":"PUT","url":"/users/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"res":{"statusCode":500},"err":{"type":"Error","message":"\"id\" is required!","stack":"Error: \"id\" is required!\n    at anonymous1 (eval at build (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fast-json-stringify/index.js:207:23), <anonymous>:35:15)\n    at anonymous0 (eval at build (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fast-json-stringify/index.js:207:23), <anonymous>:175:17)\n    at serialize (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:939:12)\n    at preSerializationHookEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:519:17)\n    at preSerializationHook (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:503:5)\n    at Reply.send (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:206:7)\n    at Object.updateUser (file:///home/vvaalant/Documents/ring7/new2/backend/controllers/userController.js:84:22)\n    at preHandlerCallbackInner (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:161:24)\n    at preHandlerCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:129:5)\n    at validationCompleted (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:119:5)","serialization":{"url":"/users/:id","method":"PUT"}},"msg":"\"id\" is required!"}
{"level":30,"time":1746643234377,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-u","res":{"statusCode":500},"responseTime":6.941882133483887,"msg":"request completed"}
{"level":30,"time":1746643234393,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-v","req":{"method":"GET","url":"/users/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234393,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-v","res":{"statusCode":200},"responseTime":0.6692228317260742,"msg":"request completed"}
{"level":30,"time":1746643234402,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-w","req":{"method":"PUT","url":"/users/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE id = 1.0

            UPDATE users
            SET username = 'lumi', password_hash = '$2b$10$QiSxnXpZbF5mJWVZLNzztOOtw'/*+28 bytes*/, email = 'new@email.com', avatar_url = 'newlink.com'
            WHERE id = 1.0
        
{"level":50,"time":1746643234513,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-w","req":{"method":"PUT","url":"/users/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"res":{"statusCode":500},"err":{"type":"Error","message":"\"id\" is required!","stack":"Error: \"id\" is required!\n    at anonymous1 (eval at build (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fast-json-stringify/index.js:207:23), <anonymous>:35:15)\n    at anonymous0 (eval at build (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fast-json-stringify/index.js:207:23), <anonymous>:175:17)\n    at serialize (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:939:12)\n    at preSerializationHookEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:519:17)\n    at preSerializationHook (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:503:5)\n    at Reply.send (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:206:7)\n    at Object.updateUser (file:///home/vvaalant/Documents/ring7/new2/backend/controllers/userController.js:84:22)","serialization":{"url":"/users/:id","method":"PUT"}},"msg":"\"id\" is required!"}
            # Subtest: PUT `/users/1` returns 200 if password updated
                not ok 1 - Status code 200
                  ---
                  compare: ===
                  at:
                    fileName: tests/user.test.js
                    lineNumber: 126
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/user.test.js:126:19)
                  source: >2
                                t.test('PUT `/users/1` returns 200 if password updated', async (t) => {
                                    let response = await updateUserResponse(app, 1, authToken, { password: 'newpassword' });
                                    t.equal(response.statusCode, 200, 'Status code 200');
                    ------------------^
                  
                                    let data = await response.json();
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,1 +1,1 @@
                    -200
                    +500
                  ...
                
                not ok 2 - should be equal
                  ---
                  compare: ===
                  at:
                    fileName: tests/user.test.js
                    lineNumber: 129
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/user.test.js:129:19)
                  source: |2
                  
                                    let data = await response.json();
                                    t.equal(data.message, 'User updated successfully');
                    ------------------^
                                    t.same(data.item, {
                                        username: 'lumi',
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,1 +1,1 @@
                    -User updated successfully
                    +"id" is required!
                  ...
                
                not ok 3 - should be equivalent
                  ---
                  diff: |
                    --- expected
                    +++ actual
                    @@ -1,5 +1,1 @@
                    -Object {
                    -  "username": "lumi",
                    -  "email": "new@email.com",
                    -  "avatar_url": "newlink.com",
                    -}
                    +undefined
                  at:
                    fileName: tests/user.test.js
                    lineNumber: 130
                    columnNumber: 19
                    typeName: Test
                  stack: |
                    Test.<anonymous> (tests/user.test.js:130:19)
                  source: |2
                                    let data = await response.json();
                                    t.equal(data.message, 'User updated successfully');
                                    t.same(data.item, {
                    ------------------^
                                        username: 'lumi',
                                        email: 'new@email.com',
                  ...
                
{"level":30,"time":1746643234513,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-w","res":{"statusCode":500},"responseTime":111.51302433013916,"msg":"request completed"}
{"level":30,"time":1746643234527,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-x","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'lumi'
{"level":30,"time":1746643234633,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-x","res":{"statusCode":401},"responseTime":105.85128402709961,"msg":"request completed"}
                ok 4 - Status code 401
                ok 5 - should be equal
{"level":30,"time":1746643234634,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-y","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'lumi'
SELECT two_fa_enabled FROM users WHERE id = 1.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 1.0
            AND online_status = FALSE
        
{"level":30,"time":1746643234739,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-y","res":{"statusCode":200},"responseTime":105.0981969833374,"msg":"request completed"}
                ok 6 - Token is present
                ok 7 - Status code 200
                ok 8 - should be equivalent
                1..8
            not ok 6 - PUT `/users/1` returns 200 if password updated # time=338.416ms
              ---
              at:
                fileName: tests/user.test.js
                lineNumber: 124
                columnNumber: 15
                typeName: Test
              source: >2
              
                            // Test password update and login with new password
                            t.test('PUT `/users/1` returns 200 if password updated', async (t) => {
                --------------^
                                let response = await updateUserResponse(app, 1, authToken, { password: 'newpassword' });
                                t.equal(response.statusCode, 200, 'Status code 200');
              ...
            
            1..6
        not ok 4 - PUT `/users/:id` # time=518.48ms
          ---
          at:
            fileName: tests/user.test.js
            lineNumber: 57
            columnNumber: 11
            typeName: Test
          source: >2
          
                    // Group of tests for updating user information
                    t.test('PUT `/users/:id`', async (t) => {
            ----------^
                        const response = await loginResponse(app, { username: 'testuser', password: 'testpassword' });
                        const authToken = (await response.json()).token;
          ...
        
        1..4
    not ok 2 - User Routes Suite # time=551.368ms
      ---
      at:
        fileName: tests/user.test.js
        lineNumber: 6
        columnNumber: 7
        functionName: runUserTests
        isToplevel: true
      source: |
        // Group of tests for User routes
        function runUserTests(app, t) {
            t.test('User Routes Suite', async (t) => {
        ------^
      
                // Test retrieving all users
      ...
    
{"level":30,"time":1746643234748,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-z","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'lumi'
SELECT two_fa_enabled FROM users WHERE id = 1.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 1.0
            AND online_status = FALSE
        
{"level":30,"time":1746643234853,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-z","res":{"statusCode":200},"responseTime":104.99240112304688,"msg":"request completed"}

            SELECT * 
            FROM friends 
            WHERE user_id = 1.0 OR friend_id = 1.0
        
    # Subtest: POST `/login`
        # Subtest: GET `/friends` returns 404 when no friends found for user
            ok 1 - Status code 404
            ok 2 - should be equal
            1..2
        ok 1 - GET `/friends` returns 404 when no friends found for user # time=3.936ms
        
SELECT * FROM friends WHERE user_id = 1.0 AND friend_id = 2.0
SELECT * FROM friends WHERE user_id = 2.0 AND friend_id = 1.0
        # Subtest: PATCH `/friends-requests/2` returns 404 when friend request not found
            ok 1 - Status code 404
            ok 2 - should be equal
            1..2
        ok 2 - PATCH `/friends-requests/2` returns 404 when friend request not found # time=1.979ms
        
        # Subtest: POST `/friend-requests/:id`
            # Subtest: POST `/friend-requests/1` returns 400 when request to itself
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 1 - POST `/friend-requests/1` returns 400 when request to itself # time=2.978ms
            

            SELECT status 
            FROM friends 
            WHERE user_id = 0.0 AND friend_id = 1.0
            OR friend_id = 0.0 AND user_id = 1.0
        

            INSERT INTO friends (user_id, friend_id)
            VALUES (1.0, 0.0)
        
SqliteError: FOREIGN KEY constraint failed
    at Object.sendFriendRequest [90m(file:///home/vvaalant/Documents/ring7/new2/backend/[39mcontrollers/friendController.js:80:12[90m)[39m
    at preHandlerCallbackInner [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:161:24[90m)[39m
    at preHandlerCallback [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:129:5[90m)[39m
    at validationCompleted [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:119:5[90m)[39m
    at preValidationCallback [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:96:5[90m)[39m
    at handler [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:73:7[90m)[39m
    at Object.handleRequest [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:44:9[90m)[39m
    at runPreParsing [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/route.js:571:19[90m)[39m
    at next [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/hooks.js:236:9[90m)[39m
    at handleResolve [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/hooks.js:253:7[90m)[39m {
  code: [32m'SQLITE_CONSTRAINT_FOREIGNKEY'[39m
}
            # Subtest: POST `/friend-requests/0` returns 500 when invalid id
                ok 1 - Status code 500
                ok 2 - should be equal
                1..2
            ok 2 - POST `/friend-requests/0` returns 500 when invalid id # time=2.384ms
            

            SELECT status 
            FROM friends 
            WHERE user_id = 2.0 AND friend_id = 1.0
            OR friend_id = 2.0 AND user_id = 1.0
        

            INSERT INTO friends (user_id, friend_id)
            VALUES (1.0, 2.0)
        

            SELECT * FROM friends 
            WHERE user_id = 1.0 AND friend_id = 2.0
        
            # Subtest: POST `/friend-requests/2` returns 200 when successfully sent
                ok 1 - Status code 200
                ok 2 - should be equal
                ok 3 - should be equivalent
                1..3
            ok 3 - POST `/friend-requests/2` returns 200 when successfully sent # time=7.095ms
            

            SELECT status 
            FROM friends 
            WHERE user_id = 2.0 AND friend_id = 1.0
            OR friend_id = 2.0 AND user_id = 1.0
        

            INSERT INTO friends (user_id, friend_id)
            VALUES (1.0, 2.0)
        
            # Subtest: POST `/friend-requests/2` returns 409 when friend request already exists
                ok 1 - Status code 409
                ok 2 - should be equal
                1..2
            ok 4 - POST `/friend-requests/2` returns 409 when friend request already exists # time=1.931ms
            
            1..4
        ok 3 - POST `/friend-requests/:id` # time=16.397ms
        

            SELECT status 
            FROM friends 
            WHERE (user_id = 1.0 AND friend_id = 6.0) OR (user_id = 6.0 AND friend_id = 1.0)
        
        # Subtest: GET `/friends/:id/status`
            # Subtest: GET `/friends/:id/status` returns 404 when friend not found
                ok 1 - Status code 404
                ok 2 - should be equal
                1..2
            ok 1 - GET `/friends/:id/status` returns 404 when friend not found # time=2.757ms
            

            SELECT status 
            FROM friends 
            WHERE (user_id = 1.0 AND friend_id = 2.0) OR (user_id = 2.0 AND friend_id = 1.0)
        
            # Subtest: GET `/friends/:id/status` returns 400 when friend request pending
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 2 - GET `/friends/:id/status` returns 400 when friend request pending # time=1.735ms
            
            1..2
        ok 4 - GET `/friends/:id/status` # time=6.164ms
        
SELECT * FROM friends WHERE user_id = 1.0 AND friend_id = 2.0
        # Subtest: PATCH `/friends-requests/2` returns 400 waiting for friend to accept request
            ok 1 - Status code 400
            ok 2 - should be equal
            1..2
        ok 5 - PATCH `/friends-requests/2` returns 400 waiting for friend to accept request # time=1.531ms
        
{"level":30,"time":1746643234856,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-10","req":{"method":"GET","url":"/friends","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234857,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-10","res":{"statusCode":404},"responseTime":0.8011159896850586,"msg":"request completed"}
{"level":30,"time":1746643234858,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-11","req":{"method":"PATCH","url":"/friend-requests/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234859,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-11","res":{"statusCode":404},"responseTime":0.982304573059082,"msg":"request completed"}
{"level":30,"time":1746643234862,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-12","req":{"method":"POST","url":"/friend-requests/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234863,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-12","res":{"statusCode":400},"responseTime":0.6037111282348633,"msg":"request completed"}
{"level":30,"time":1746643234864,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-13","req":{"method":"POST","url":"/friend-requests/0","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234866,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-13","res":{"statusCode":500},"responseTime":1.3816003799438477,"msg":"request completed"}
{"level":30,"time":1746643234867,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-14","req":{"method":"POST","url":"/friend-requests/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234873,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-14","res":{"statusCode":200},"responseTime":5.785711288452148,"msg":"request completed"}
{"level":30,"time":1746643234874,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-15","req":{"method":"POST","url":"/friend-requests/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234875,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-15","res":{"statusCode":409},"responseTime":0.7617387771606445,"msg":"request completed"}
{"level":30,"time":1746643234879,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-16","req":{"method":"GET","url":"/friends/6/status","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234880,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-16","res":{"statusCode":404},"responseTime":0.9446773529052734,"msg":"request completed"}
{"level":30,"time":1746643234881,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-17","req":{"method":"GET","url":"/friends/2/status","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234882,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-17","res":{"statusCode":400},"responseTime":0.7289371490478516,"msg":"request completed"}
{"level":30,"time":1746643234884,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-18","req":{"method":"PATCH","url":"/friend-requests/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643234884,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-18","res":{"statusCode":400},"responseTime":0.5760908126831055,"msg":"request completed"}
{"level":30,"time":1746643234885,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-19","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'kim'
SELECT two_fa_enabled FROM users WHERE id = 2.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 2.0
            AND online_status = FALSE
        
{"level":30,"time":1746643234999,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-19","res":{"statusCode":200},"responseTime":114.1265697479248,"msg":"request completed"}
SELECT * FROM friends WHERE user_id = 2.0 AND friend_id = 1.0
SELECT * FROM friends WHERE user_id = 1.0 AND friend_id = 2.0

            UPDATE friends 
            SET status = 'accepted' 
            WHERE user_id = 1.0 AND friend_id = 2.0
        

            SELECT * FROM friends 
            WHERE user_id = 1.0 AND friend_id = 2.0
        
        # Subtest: PATCH `/friends-requests/2` returns 200 accept friend request
            ok 1 - Status code 200
            ok 2 - should be equal
            ok 3 - should be equivalent
SELECT * FROM friends WHERE user_id = 2.0 AND friend_id = 1.0
SELECT * FROM friends WHERE user_id = 1.0 AND friend_id = 2.0
            # Subtest: PATCH `/friend-requests/2` returns 400 when already friends
                ok 1 - Status code 400
                ok 2 - should be equal
                1..2
            ok 4 - PATCH `/friend-requests/2` returns 400 when already friends # time=1.681ms
            
            1..4
        ok 6 - PATCH `/friends-requests/2` returns 200 accept friend request # time=122.904ms
        
SELECT * FROM friends WHERE user_id = 1.0 AND friend_id = 2.0
        # Subtest: PATCH `/friend-requests/2` returns 400 when already friends
            ok 1 - Status code 400
            ok 2 - should be equal
            1..2
        ok 7 - PATCH `/friend-requests/2` returns 400 when already friends # time=1.458ms
        

            SELECT status 
            FROM friends 
            WHERE user_id = 2.0 AND friend_id = 1.0
            OR friend_id = 2.0 AND user_id = 1.0
        
        # Subtest: POST `/friend-requests/2` returns 400 when already friends
            ok 1 - Status code 400
            ok 2 - should be equal
            1..2
        ok 8 - POST `/friend-requests/2` returns 400 when already friends # time=1.377ms
        

            SELECT status 
            FROM friends 
            WHERE (user_id = 1.0 AND friend_id = 2.0) OR (user_id = 2.0 AND friend_id = 1.0)
        

            SELECT username, online_status FROM users 
            WHERE id = 2.0
        
        # Subtest: GET `/friends/:id/status` returns 200 when already friends
            ok 1 - Status code 200
            ok 2 - should be equivalent
            1..2
        ok 9 - GET `/friends/:id/status` returns 200 when already friends # time=1.785ms
        

            SELECT * 
            FROM friends 
            WHERE user_id = 1.0 OR friend_id = 1.0
        
        # Subtest: GET `/friends` returns 200 returning all friends
            ok 1 - Status code 200
            ok 2 - should be equivalent
            1..2
        ok 10 - GET `/friends` returns 200 returning all friends # time=1.795ms
        

            DELETE FROM friends 
            WHERE (user_id = 1.0 AND friend_id = 4.0) OR (user_id = 4.0 AND friend_id = 1.0)
        
        # Subtest: DELETE `/friends/:id` returns 404 when unauthorized action
            ok 1 - Status code 404
            ok 2 - should be equal
            1..2
        ok 11 - DELETE `/friends/:id` returns 404 when unauthorized action # time=1.81ms
        

            DELETE FROM friends 
            WHERE (user_id = 1.0 AND friend_id = 2.0) OR (user_id = 2.0 AND friend_id = 1.0)
        
        # Subtest: DELETE `/friends/:id` returns 200 when friend removed
            ok 1 - Status code 200
            ok 2 - should be equal
            1..2
        ok 12 - DELETE `/friends/:id` returns 200 when friend removed # time=5.834ms
        
        1..12
    ok 3 - POST `/login` # time=276.894ms
    
{"level":30,"time":1746643235000,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1a","req":{"method":"PATCH","url":"/friend-requests/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235005,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1a","res":{"statusCode":200},"responseTime":5.047153472900391,"msg":"request completed"}
{"level":30,"time":1746643235006,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1b","req":{"method":"PATCH","url":"/friend-requests/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235007,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1b","res":{"statusCode":400},"responseTime":0.7129678726196289,"msg":"request completed"}
{"level":30,"time":1746643235008,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1c","req":{"method":"PATCH","url":"/friend-requests/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235009,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1c","res":{"statusCode":400},"responseTime":0.5553951263427734,"msg":"request completed"}
{"level":30,"time":1746643235010,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1d","req":{"method":"POST","url":"/friend-requests/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235011,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1d","res":{"statusCode":400},"responseTime":0.5112142562866211,"msg":"request completed"}
{"level":30,"time":1746643235012,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1e","req":{"method":"GET","url":"/friends/2/status","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235013,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1e","res":{"statusCode":200},"responseTime":0.8149232864379883,"msg":"request completed"}
{"level":30,"time":1746643235014,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1f","req":{"method":"GET","url":"/friends","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235015,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1f","res":{"statusCode":200},"responseTime":0.764892578125,"msg":"request completed"}
{"level":30,"time":1746643235016,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1g","req":{"method":"DELETE","url":"/friends/4","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235017,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1g","res":{"statusCode":404},"responseTime":0.8765649795532227,"msg":"request completed"}
{"level":30,"time":1746643235018,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1h","req":{"method":"DELETE","url":"/friends/2","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235023,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1h","res":{"statusCode":200},"responseTime":4.881634712219238,"msg":"request completed"}
{"level":30,"time":1746643235025,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1i","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'kim'
SELECT two_fa_enabled FROM users WHERE id = 2.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 2.0
            AND online_status = FALSE
        
{"level":30,"time":1746643235132,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1i","res":{"statusCode":200},"responseTime":107.43832397460938,"msg":"request completed"}
{"level":30,"time":1746643235133,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1j","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'lumi'
SELECT two_fa_enabled FROM users WHERE id = 1.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 1.0
            AND online_status = FALSE
        
{"level":30,"time":1746643235239,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1j","res":{"statusCode":200},"responseTime":106.33691024780273,"msg":"request completed"}
SELECT * FROM players WHERE user_id = 2.0
    # Subtest: POST `/login`
        # Subtest: GET `/players` returns 404 when no players found for user
            not ok 1 - should be equal
              ---
              compare: ===
              at:
                fileName: tests/player.test.js
                lineNumber: 24
                columnNumber: 15
                typeName: Test
              stack: |
                Test.<anonymous> (tests/player.test.js:24:15)
              source: >2
                        t.test('GET `/players` returns 404 when no players found for user', async (t) => {
                            response = await getPlayersResponse(app, authToken);
                            t.equal(response.statusCode, 404);
                --------------^
                            t.equal(response.json().error, 'No players found for this user');
                        });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -404
                +200
              ...
            
            not ok 2 - should be equal
              ---
              compare: ===
              at:
                fileName: tests/player.test.js
                lineNumber: 25
                columnNumber: 15
                typeName: Test
              stack: |
                Test.<anonymous> (tests/player.test.js:25:15)
              source: |2
                            response = await getPlayersResponse(app, authToken);
                            t.equal(response.statusCode, 404);
                            t.equal(response.json().error, 'No players found for this user');
                --------------^
                        });
              diff: |
                --- expected
                +++ actual
                @@ -1,1 +1,1 @@
                -No players found for this user
                +undefined
              ...
            
            1..2
        not ok 1 - GET `/players` returns 404 when no players found for user # time=11.456ms
          ---
          at:
            fileName: tests/player.test.js
            lineNumber: 22
            columnNumber: 11
            typeName: Test
          source: >2
          
                    // Test when no players exist for the user
                    t.test('GET `/players` returns 404 when no players found for user', async (t) => {
            ----------^
                        response = await getPlayersResponse(app, authToken);
                        t.equal(response.statusCode, 404);
          ...
        
{"level":30,"time":1746643235242,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1k","req":{"method":"GET","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235243,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1k","res":{"statusCode":200},"responseTime":0.8274040222167969,"msg":"request completed"}
{"level":30,"time":1746643235254,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1l","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player1', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 1.0
        # Subtest: POST `/players` returns 201 on successful creation
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equivalent
            1..3
        ok 2 - POST `/players` returns 201 on successful creation # time=10.372ms
        
{"level":30,"time":1746643235263,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1l","res":{"statusCode":201},"responseTime":8.89097785949707,"msg":"request completed"}
{"level":30,"time":1746643235264,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1m","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player1', NULL)
        # Subtest: POST `/players` returns 409 for duplicate display_name
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 3 - POST `/players` returns 409 for duplicate display_name # time=2.154ms
        
{"level":30,"time":1746643235265,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1m","res":{"statusCode":409},"responseTime":1.1800508499145508,"msg":"request completed"}
{"level":30,"time":1746643235267,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1n","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player2', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 2.0
{"level":30,"time":1746643235272,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1n","res":{"statusCode":201},"responseTime":5.421374320983887,"msg":"request completed"}
{"level":30,"time":1746643235272,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1o","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player3', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 3.0
{"level":30,"time":1746643235277,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1o","res":{"statusCode":201},"responseTime":4.586200714111328,"msg":"request completed"}
{"level":30,"time":1746643235277,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1p","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player4', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 4.0
{"level":30,"time":1746643235282,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1p","res":{"statusCode":201},"responseTime":4.93734073638916,"msg":"request completed"}
{"level":30,"time":1746643235283,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1q","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player5', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 5.0
{"level":30,"time":1746643235288,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1q","res":{"statusCode":201},"responseTime":5.577727317810059,"msg":"request completed"}
{"level":30,"time":1746643235288,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1r","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player6', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 6.0
{"level":30,"time":1746643235293,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1r","res":{"statusCode":201},"responseTime":4.647381782531738,"msg":"request completed"}
{"level":30,"time":1746643235293,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1s","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player7', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 7.0
{"level":30,"time":1746643235301,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1s","res":{"statusCode":201},"responseTime":7.643750190734863,"msg":"request completed"}
{"level":30,"time":1746643235301,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1t","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player8', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 8.0
{"level":30,"time":1746643235307,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1t","res":{"statusCode":201},"responseTime":5.3524675369262695,"msg":"request completed"}
{"level":30,"time":1746643235307,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1u","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
        # Subtest: POST `/players` returns 400 when max players limit is reached
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 4 - POST `/players` returns 400 when max players limit is reached # time=41.862ms
        
SELECT * FROM players WHERE id = 8.0 AND user_id = 1.0
        # Subtest: GET `/players/:id` returns 404 when unauthorized
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 5 - GET `/players/:id` returns 404 when unauthorized # time=1.688ms
        
SELECT * FROM players WHERE id = 100.0 AND user_id = 2.0
        # Subtest: GET `/players/:id` returns 404 when player does not exist
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 6 - GET `/players/:id` returns 404 when player does not exist # time=1.408ms
        
SELECT * FROM players WHERE id = 8.0 AND user_id = 2.0
        # Subtest: GET `/players/:id` returns 200 with valid data
            ok 1 - should be equal
            ok 2 - should be equivalent
            1..2
        ok 7 - GET `/players/:id` returns 200 with valid data # time=1.855ms
        
DELETE FROM players WHERE id = 3.0 AND user_id = 1.0
        # Subtest: DELETE `/players/:id` returns 404 when unauthorized
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 8 - DELETE `/players/:id` returns 404 when unauthorized # time=1.746ms
        
DELETE FROM players WHERE id = 100.0 AND user_id = 2.0
        # Subtest: DELETE `/players/:id` returns 404 when player does not exist
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 9 - DELETE `/players/:id` returns 404 when player does not exist # time=1.335ms
        
DELETE FROM players WHERE id = 3.0 AND user_id = 2.0
        # Subtest: DELETE `/players/:id` returns 200 on success
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 10 - DELETE `/players/:id` returns 200 on success # time=7.281ms
        
SELECT * FROM players WHERE user_id = 2.0
        # Subtest: GET `/players` returns remaining players
            ok 1 - should be equal
            ok 2 - should be equivalent
            ok 3 - should be equivalent
            ok 4 - should be equivalent
            1..4
        ok 11 - GET `/players` returns remaining players # time=2.285ms
        
{"level":30,"time":1746643235308,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1u","res":{"statusCode":400},"responseTime":0.7320499420166016,"msg":"request completed"}
{"level":30,"time":1746643235309,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1v","req":{"method":"GET","url":"/players/8","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235310,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1v","res":{"statusCode":404},"responseTime":0.7595605850219727,"msg":"request completed"}
{"level":30,"time":1746643235311,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1w","req":{"method":"GET","url":"/players/100","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235311,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1w","res":{"statusCode":404},"responseTime":0.5619163513183594,"msg":"request completed"}
{"level":30,"time":1746643235313,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1x","req":{"method":"GET","url":"/players/8","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235313,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1x","res":{"statusCode":200},"responseTime":0.7686653137207031,"msg":"request completed"}
{"level":30,"time":1746643235315,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1y","req":{"method":"DELETE","url":"/players/3","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235316,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1y","res":{"statusCode":404},"responseTime":0.8066320419311523,"msg":"request completed"}
{"level":30,"time":1746643235317,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1z","req":{"method":"DELETE","url":"/players/100","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235317,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-1z","res":{"statusCode":404},"responseTime":0.5172920227050781,"msg":"request completed"}
{"level":30,"time":1746643235318,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-20","req":{"method":"DELETE","url":"/players/3","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235325,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-20","res":{"statusCode":200},"responseTime":6.352924346923828,"msg":"request completed"}
{"level":30,"time":1746643235326,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-21","req":{"method":"GET","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235327,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-21","res":{"statusCode":200},"responseTime":0.8120450973510742,"msg":"request completed"}
{"level":30,"time":1746643235329,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-22","req":{"method":"PUT","url":"/players/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM players WHERE id = 1.0 AND user_id = 1.0
        # Subtest: PUT `/players/:id` returns 404 when unauthorized
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 12 - PUT `/players/:id` returns 404 when unauthorized # time=2.241ms
        
{"level":30,"time":1746643235330,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-22","res":{"statusCode":404},"responseTime":1.2769241333007812,"msg":"request completed"}
{"level":30,"time":1746643235331,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-23","req":{"method":"PUT","url":"/players/100","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM players WHERE id = 100.0 AND user_id = 2.0
        # Subtest: PUT `/players/:id` returns 404 for invalid id
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 13 - PUT `/players/:id` returns 404 for invalid id # time=1.829ms
        
{"level":30,"time":1746643235332,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-23","res":{"statusCode":404},"responseTime":0.8240251541137695,"msg":"request completed"}
{"level":30,"time":1746643235333,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-24","req":{"method":"PUT","url":"/players/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM players WHERE id = 1.0 AND user_id = 2.0
SELECT * FROM players WHERE display_name = 'Player7'
        # Subtest: PUT `/players/:id` returns 400 for duplicate display_name
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 14 - PUT `/players/:id` returns 400 for duplicate display_name # time=2.076ms
        
{"level":30,"time":1746643235334,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-24","res":{"statusCode":400},"responseTime":1.1117668151855469,"msg":"request completed"}
{"level":30,"time":1746643235336,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-25","req":{"method":"PUT","url":"/players/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM players WHERE id = 1.0 AND user_id = 2.0
SELECT * FROM players WHERE display_name = 'updatedPlayer'
UPDATE players SET display_name = 'updatedPlayer', avatar_url = 'notnull.com' WHERE id = 1.0
        # Subtest: PUT `/players/:id` returns 200 when update is successful
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equivalent
            1..3
        ok 15 - PUT `/players/:id` returns 200 when update is successful # time=6.499ms
        
        1..15
    not ok 4 - POST `/login` # time=317.802ms
      ---
      at:
        fileName: tests/player.test.js
        lineNumber: 12
        columnNumber: 7
        functionName: runPlayerTests
        isToplevel: true
      source: >
        // Test suite for Player-related API routes
      
        function runPlayerTests(app, t) {
            t.test('POST `/login`', async (t) => {
        ------^
                // Login as user `kim` and get token
                let response = await loginResponse(app, { username: 'kim', password: 'password' });
      ...
    
SELECT * FROM users WHERE username = 'kim'
{"level":30,"time":1746643235341,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-25","res":{"statusCode":200},"responseTime":5.344539642333984,"msg":"request completed"}
{"level":30,"time":1746643235345,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-26","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT two_fa_enabled FROM users WHERE id = 2.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 2.0
            AND online_status = FALSE
        
{"level":30,"time":1746643235458,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-26","res":{"statusCode":200},"responseTime":113.45169258117676,"msg":"request completed"}
{"level":30,"time":1746643235458,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-27","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'lumi'
SELECT two_fa_enabled FROM users WHERE id = 1.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 1.0
            AND online_status = FALSE
        
{"level":30,"time":1746643235564,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-27","res":{"statusCode":200},"responseTime":105.69998931884766,"msg":"request completed"}

            SELECT
                mh.id,
                mh.type,
                mh.tournament_id,
                mh.date,
                mh.round, 
                COALESCE(
                    (
                        SELECT mwh.winner_id
                        FROM match_winner_history mwh
                        WHERE mwh.match_id = mh.id
                        LIMIT 1
                    ), NULL
                ) AS winner_id,
                COALESCE(
                    (
                        SELECT json_group_array(
                            json_object(
                                'player_id', mph.player_id, 
                                'score', mph.score
                            )
                        )
                        FROM match_player_history mph
                        WHERE mph.match_id = mh.id
                    ), '[]'
                ) AS players
            FROM match_history mh
        
    # Subtest: POST `/login` - Login as kim
        # Subtest: GET `/match-histories` returns 200 with empty array when no matches found for user
            ok 1 - Status code should be 200
            ok 2 - should be equivalent
            1..2
        ok 1 - GET `/match-histories` returns 200 with empty array when no matches found for user # time=4.338ms
        
{"level":30,"time":1746643235567,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-28","req":{"method":"GET","url":"/match-histories","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235568,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-28","res":{"statusCode":200},"responseTime":0.821324348449707,"msg":"request completed"}
{"level":30,"time":1746643235570,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-29","req":{"method":"POST","url":"/match-histories","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: POST `/match-histories` returns 400 when missing one player
            ok 1 - Status code should be 400
            ok 2 - should be equal
            1..2
        ok 2 - POST `/match-histories` returns 400 when missing one player # time=2.207ms
        
{"level":30,"time":1746643235571,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-29","res":{"statusCode":400},"responseTime":1.2070999145507812,"msg":"request completed"}
{"level":30,"time":1746643235572,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2a","req":{"method":"POST","url":"/match-histories","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
BEGIN
INSERT INTO match_history (type, tournament_id, round, user_id) VALUES ('1v1', NULL, NULL, 2.0)

        INSERT INTO match_player_history
        (match_id, player_id)
        VALUES (1.0, 100.0)
    
ROLLBACK
        # Subtest: POST `/match-histories` returns 500 when player does not exist
            ok 1 - Status code should be 500
            ok 2 - should be equal
            1..2
        ok 3 - POST `/match-histories` returns 500 when player does not exist # time=3.321ms
        
{"level":30,"time":1746643235574,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2a","res":{"statusCode":500},"responseTime":2.374326705932617,"msg":"request completed"}
{"level":30,"time":1746643235576,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2b","req":{"method":"POST","url":"/match-histories","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
BEGIN
INSERT INTO match_history (type, tournament_id, round, user_id) VALUES ('1v1', NULL, NULL, 2.0)

        INSERT INTO match_player_history
        (match_id, player_id)
        VALUES (1.0, 1.0)
    

        INSERT INTO match_player_history
        (match_id, player_id)
        VALUES (1.0, 2.0)
    
COMMIT
        # Subtest: POST `/match-histories` returns 201 when match is successfully created
            ok 1 - Status code should be 201
            ok 2 - should be equal
            1..2
        ok 4 - POST `/match-histories` returns 201 when match is successfully created # time=9.976ms
        

            SELECT
                mh.id,
                mh.type,
                mh.tournament_id,
                mh.date,
                mh.round, 
                COALESCE(
                    (
                        SELECT mwh.winner_id
                        FROM match_winner_history mwh
                        WHERE mwh.match_id = mh.id
                        LIMIT 1
                    ), NULL
                ) AS winner_id,
                COALESCE(
                    (
                        SELECT json_group_array(
                            json_object(
                                'player_id', mph.player_id, 
                                'score', mph.score
                            )
                        )
                        FROM match_player_history mph
                        WHERE mph.match_id = mh.id
                    ), '[]'
                ) AS players
            FROM match_history mh
            WHERE mh.id = 200.0
        
        # Subtest: GET `/match-histories/200` returns 404 when match is not found
            ok 1 - Status code should be 404
            ok 2 - should be equal
            1..2
        ok 5 - GET `/match-histories/200` returns 404 when match is not found # time=1.75ms
        

            SELECT
                mh.id,
                mh.type,
                mh.tournament_id,
                mh.date,
                mh.round, 
                COALESCE(
                    (
                        SELECT mwh.winner_id
                        FROM match_winner_history mwh
                        WHERE mwh.match_id = mh.id
                        LIMIT 1
                    ), NULL
                ) AS winner_id,
                COALESCE(
                    (
                        SELECT json_group_array(
                            json_object(
                                'player_id', mph.player_id, 
                                'score', mph.score
                            )
                        )
                        FROM match_player_history mph
                        WHERE mph.match_id = mh.id
                    ), '[]'
                ) AS players
            FROM match_history mh
            WHERE mh.id = 1.0
        
        # Subtest: GET `/match-histories/1` returns 200 for an existing match
            ok 1 - Status code should be 200
            ok 2 - should be equivalent
            1..2
        ok 6 - GET `/match-histories/1` returns 200 for an existing match # time=2.164ms
        
{"level":30,"time":1746643235585,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2b","res":{"statusCode":201},"responseTime":9.009550094604492,"msg":"request completed"}
{"level":30,"time":1746643235586,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2c","req":{"method":"GET","url":"/match-histories/200","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235587,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2c","res":{"statusCode":404},"responseTime":0.7965202331542969,"msg":"request completed"}
{"level":30,"time":1746643235588,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2d","req":{"method":"GET","url":"/match-histories/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235589,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2d","res":{"statusCode":200},"responseTime":0.8668460845947266,"msg":"request completed"}
{"level":30,"time":1746643235591,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2e","req":{"method":"PUT","url":"/match-histories/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM match_history WHERE id = 1.0 AND user_id = 1.0
        # Subtest: PUT /match-histories/:id returns 403 when unauthorized to update
            ok 1 - Status code should be 403
            ok 2 - should be equal
            1..2
        ok 7 - PUT /match-histories/:id returns 403 when unauthorized to update # time=2.765ms
        
{"level":30,"time":1746643235592,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2e","res":{"statusCode":403},"responseTime":1.783625602722168,"msg":"request completed"}
{"level":30,"time":1746643235593,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2f","req":{"method":"PUT","url":"/match-histories/100","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM match_history WHERE id = 100.0 AND user_id = 2.0
        # Subtest: PUT /match-histories/:id returns 403 when match not found
            ok 1 - Status code should be 403
            ok 2 - should be equal
            1..2
        ok 8 - PUT /match-histories/:id returns 403 when match not found # time=1.648ms
        
{"level":30,"time":1746643235594,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2f","res":{"statusCode":403},"responseTime":0.8225116729736328,"msg":"request completed"}
{"level":30,"time":1746643235595,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2g","req":{"method":"PUT","url":"/match-histories/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: PUT /match-histories/:id returns 400 when score is missing
            ok 1 - Status code should be 400
            ok 2 - should be equal
            1..2
        ok 9 - PUT /match-histories/:id returns 400 when score is missing # time=1.567ms
        
{"level":30,"time":1746643235596,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2g","res":{"statusCode":400},"err":{"type":"Error","message":"body/players/1 must have required property 'score'","stack":"Error: body/players/1 must have required property 'score'\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/players/1","schemaPath":"#/properties/players/items/required","keyword":"required","params":{"missingProperty":"score"},"message":"must have required property 'score'"}],"validationContext":"body"},"msg":"body/players/1 must have required property 'score'"}
{"level":30,"time":1746643235596,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2g","res":{"statusCode":400},"responseTime":0.7022380828857422,"msg":"request completed"}
{"level":30,"time":1746643235597,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2h","req":{"method":"PUT","url":"/match-histories/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM match_history WHERE id = 1.0 AND user_id = 2.0
BEGIN
SELECT * FROM match_player_history WHERE match_id = 1.0 AND player_id = 1.0

        UPDATE match_player_history SET score = 2.0 WHERE match_id = 1.0 AND player_id = 1.0
    
SELECT * FROM match_player_history WHERE match_id = 1.0 AND player_id = 4.0
COMMIT
        # Subtest: PUT /match-histories/:id returns 404 when player not in match
            ok 1 - Status code should be 404
            ok 2 - should be equal
            1..2
        ok 10 - PUT /match-histories/:id returns 404 when player not in match # time=6.948ms
        
{"level":30,"time":1746643235599,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2h","res":{"statusCode":404},"responseTime":1.5744924545288086,"msg":"request completed"}
{"level":40,"time":1746643235603,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2h","err":{"type":"FastifyError","message":"Reply was already sent, did you forget to \"return reply\" in \"/match-histories/1\" (PUT)?","stack":"FastifyError: Reply was already sent, did you forget to \"return reply\" in \"/match-histories/1\" (PUT)?\n    at Reply.send (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:134:26)\n    at Object.updateMatchHistory (file:///home/vvaalant/Documents/ring7/new2/backend/controllers/matchHistoryController.js:184:32)\n    at preHandlerCallbackInner (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:161:24)\n    at preHandlerCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:129:5)\n    at validationCompleted (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:119:5)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:96:5)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)","code":"FST_ERR_REP_ALREADY_SENT","name":"FastifyError","statusCode":500},"msg":"Reply was already sent, did you forget to \"return reply\" in \"/match-histories/1\" (PUT)?"}
{"level":30,"time":1746643235604,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2i","req":{"method":"PUT","url":"/match-histories/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: PUT /match-histories/:id returns 400 when winner is not part of the players
            ok 1 - Status code should be 400
            ok 2 - should be equal
            1..2
        ok 11 - PUT /match-histories/:id returns 400 when winner is not part of the players # time=1.354ms
        
{"level":30,"time":1746643235605,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2i","res":{"statusCode":400},"responseTime":0.5139369964599609,"msg":"request completed"}
{"level":30,"time":1746643235606,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2j","req":{"method":"PUT","url":"/match-histories/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM match_history WHERE id = 1.0 AND user_id = 2.0
BEGIN
SELECT * FROM match_player_history WHERE match_id = 1.0 AND player_id = 1.0

        UPDATE match_player_history SET score = 2.0 WHERE match_id = 1.0 AND player_id = 1.0
    
UPDATE players SET losses = losses + 1 WHERE id = 1.0
SELECT * FROM match_player_history WHERE match_id = 1.0 AND player_id = 2.0

        UPDATE match_player_history SET score = 3.0 WHERE match_id = 1.0 AND player_id = 2.0
    
SELECT * FROM match_winner_history WHERE match_id = 1.0 AND winner_id = 2.0
INSERT INTO match_winner_history (match_id, winner_id) VALUES (1.0, 2.0)
UPDATE players SET wins = wins + 1 WHERE id = 2.0
COMMIT
        # Subtest: PUT /match-histories/:id returns 200 on success
            ok 1 - Status code should be 200
            ok 2 - should be equal

            SELECT
                mh.id,
                mh.type,
                mh.tournament_id,
                mh.date,
                mh.round, 
                COALESCE(
                    (
                        SELECT mwh.winner_id
                        FROM match_winner_history mwh
                        WHERE mwh.match_id = mh.id
                        LIMIT 1
                    ), NULL
                ) AS winner_id,
                COALESCE(
                    (
                        SELECT json_group_array(
                            json_object(
                                'player_id', mph.player_id, 
                                'score', mph.score
                            )
                        )
                        FROM match_player_history mph
                        WHERE mph.match_id = mh.id
                    ), '[]'
                ) AS players
            FROM match_history mh
            WHERE mh.id = 1.0
        
            ok 3 - should be equivalent
            1..3
        ok 12 - PUT /match-histories/:id returns 200 on success # time=8.456ms
        
DELETE FROM match_history WHERE id = 1.0 AND user_id = 1.0
        # Subtest: DELETE /match-histories/:id returns 404 when unauthorized
            ok 1 - Status code should be 404
            ok 2 - should be equal
            1..2
        ok 13 - DELETE /match-histories/:id returns 404 when unauthorized # time=1.612ms
        
DELETE FROM match_history WHERE id = 100.0 AND user_id = 2.0
        # Subtest: DELETE /match-histories/:id returns 404 when match does not exist
            ok 1 - Status code should be 404
            ok 2 - should be equal
            1..2
        ok 14 - DELETE /match-histories/:id returns 404 when match does not exist # time=1.304ms
        
DELETE FROM match_history WHERE id = 1.0 AND user_id = 2.0
        # Subtest: DELETE /match-histories/:id returns 200 on success
            ok 1 - Status code should be 200
            ok 2 - should be equal
            1..2
        ok 15 - DELETE /match-histories/:id returns 200 on success # time=5.783ms
        
        1..15
    ok 5 - POST `/login` - Login as kim # time=280.122ms
    

            SELECT
                t.id AS tournament_id,
                t.name,
                t.status,
                t.current_round,
                t.winner_id,
                mh.id as match_id,
                mh.type,
                mh.date,
                mh.round,
                COALESCE(
                    (
                        SELECT json_group_array(
                            json_object(
                                'player_id', mph.player_id,
                                'score', mph.score
                            )
                        )
                        FROM match_player_history mph
                        WHERE mph.match_id = mh.id
                    ), '[]'
                ) AS players
            FROM match_history mh
            JOIN tournaments t ON t.id = mh.tournament_id
        
    # Subtest: GET `/tournaments` returns 404 when no tournament exist
        ok 1 - Status code 404
        ok 2 - should be equivalent
        1..2
    ok 6 - GET `/tournaments` returns 404 when no tournament exist # time=1.863ms
    
{"level":30,"time":1746643235612,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2j","res":{"statusCode":200},"responseTime":6.309565544128418,"msg":"request completed"}
{"level":30,"time":1746643235613,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2k","req":{"method":"GET","url":"/match-histories/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235614,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2k","res":{"statusCode":200},"responseTime":0.58343505859375,"msg":"request completed"}
{"level":30,"time":1746643235615,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2l","req":{"method":"DELETE","url":"/match-histories/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235616,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2l","res":{"statusCode":404},"responseTime":0.7757587432861328,"msg":"request completed"}
{"level":30,"time":1746643235617,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2m","req":{"method":"DELETE","url":"/match-histories/100","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235617,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2m","res":{"statusCode":404},"responseTime":0.5292091369628906,"msg":"request completed"}
{"level":30,"time":1746643235618,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2n","req":{"method":"DELETE","url":"/match-histories/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235623,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2n","res":{"statusCode":200},"responseTime":4.855374336242676,"msg":"request completed"}
{"level":30,"time":1746643235625,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2o","req":{"method":"GET","url":"/tournaments","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235626,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2o","res":{"statusCode":404},"responseTime":0.8085489273071289,"msg":"request completed"}
{"level":30,"time":1746643235627,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2p","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'kim'
SELECT two_fa_enabled FROM users WHERE id = 2.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 2.0
            AND online_status = FALSE
        
{"level":30,"time":1746643235736,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2p","res":{"statusCode":200},"responseTime":109.1899881362915,"msg":"request completed"}
{"level":30,"time":1746643235736,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2q","req":{"method":"POST","url":"/login","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM users WHERE username = 'lumi'
SELECT two_fa_enabled FROM users WHERE id = 1.0
UPDATE users
            SET online_status = TRUE
            WHERE id = 1.0
            AND online_status = FALSE
        
{"level":30,"time":1746643235843,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2q","res":{"statusCode":200},"responseTime":106.26804161071777,"msg":"request completed"}
DELETE FROM 'players'
DELETE FROM sqlite_sequence WHERE name='players'
DELETE FROM 'match_history'
DELETE FROM sqlite_sequence WHERE name='match_history'
{"level":30,"time":1746643235858,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2r","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player1', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 1.0
{"level":30,"time":1746643235900,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2r","res":{"statusCode":201},"responseTime":42.14161205291748,"msg":"request completed"}
{"level":30,"time":1746643235901,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2s","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player2', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 2.0
{"level":30,"time":1746643235905,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2s","res":{"statusCode":201},"responseTime":4.651181221008301,"msg":"request completed"}
{"level":30,"time":1746643235905,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2t","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player3', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 3.0
{"level":30,"time":1746643235911,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2t","res":{"statusCode":201},"responseTime":5.480545997619629,"msg":"request completed"}
{"level":30,"time":1746643235911,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2u","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player4', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 4.0
{"level":30,"time":1746643235917,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2u","res":{"statusCode":201},"responseTime":5.333157539367676,"msg":"request completed"}
{"level":30,"time":1746643235917,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2v","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player5', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 5.0
{"level":30,"time":1746643235922,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2v","res":{"statusCode":201},"responseTime":5.040111541748047,"msg":"request completed"}
{"level":30,"time":1746643235922,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2w","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player6', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 6.0
{"level":30,"time":1746643235928,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2w","res":{"statusCode":201},"responseTime":5.605416297912598,"msg":"request completed"}
{"level":30,"time":1746643235928,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2x","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player7', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 7.0
{"level":30,"time":1746643235933,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2x","res":{"statusCode":201},"responseTime":5.0280656814575195,"msg":"request completed"}
{"level":30,"time":1746643235933,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2y","req":{"method":"POST","url":"/players","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT COUNT(*) AS count FROM players WHERE user_id = 2.0
INSERT INTO players (user_id, display_name, avatar_url) VALUES (2.0, 'Player8', NULL)
SELECT id, display_name, avatar_url, wins, losses, created_at FROM players WHERE id = 8.0
    # Subtest: POST `/login` - Login as kim
        ok 1 - should be equal
{"level":30,"time":1746643235938,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2y","res":{"statusCode":201},"responseTime":4.7451581954956055,"msg":"request completed"}
{"level":30,"time":1746643235941,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2z","req":{"method":"POST","url":"/tournaments","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: POST `/tournaments` returns 400 when creating tournament with 1 player
            ok 1 - Status code 400
            ok 2 - should be equal
            1..2
        ok 2 - POST `/tournaments` returns 400 when creating tournament with 1 player # time=3.672ms
        
{"level":30,"time":1746643235942,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2z","res":{"statusCode":400},"err":{"type":"Error","message":"body/player_ids must NOT have fewer than 3 items","stack":"Error: body/player_ids must NOT have fewer than 3 items\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/player_ids","schemaPath":"#/properties/player_ids/minItems","keyword":"minItems","params":{"limit":3},"message":"must NOT have fewer than 3 items"}],"validationContext":"body"},"msg":"body/player_ids must NOT have fewer than 3 items"}
{"level":30,"time":1746643235942,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-2z","res":{"statusCode":400},"responseTime":1.0275993347167969,"msg":"request completed"}
{"level":30,"time":1746643235943,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-30","req":{"method":"POST","url":"/tournaments","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: POST `/tournaments` returns 400 when creating tournament with 2 players
            ok 1 - Status code 400
            ok 2 - should be equal
            1..2
        ok 3 - POST `/tournaments` returns 400 when creating tournament with 2 players # time=1.313ms
        
{"level":30,"time":1746643235943,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-30","res":{"statusCode":400},"err":{"type":"Error","message":"body/player_ids must NOT have fewer than 3 items","stack":"Error: body/player_ids must NOT have fewer than 3 items\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/player_ids","schemaPath":"#/properties/player_ids/minItems","keyword":"minItems","params":{"limit":3},"message":"must NOT have fewer than 3 items"}],"validationContext":"body"},"msg":"body/player_ids must NOT have fewer than 3 items"}
{"level":30,"time":1746643235944,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-30","res":{"statusCode":400},"responseTime":0.5835943222045898,"msg":"request completed"}
{"level":30,"time":1746643235945,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-31","req":{"method":"POST","url":"/tournaments","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
BEGIN
SELECT * FROM tournaments WHERE name = 'T1'
SELECT * FROM players WHERE id = 1.0
SELECT * FROM players WHERE id = 2.0
SELECT * FROM players WHERE id = 100.0
COMMIT
TypeError: Cannot destructure property 'tournament_id' of 'rows[0]' as it is undefined.
    at Object.createTournament [90m(file:///home/vvaalant/Documents/ring7/new2/backend/[39mcontrollers/tournamentController.js:220:17[90m)[39m
    at preHandlerCallbackInner [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:161:24[90m)[39m
    at preHandlerCallback [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:129:5[90m)[39m
    at validationCompleted [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:119:5[90m)[39m
    at preValidationCallback [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:96:5[90m)[39m
    at handler [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:73:7[90m)[39m
    at [90m/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/contentTypeParser.js:214:9
[90m    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)[39m
    at done [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/contentTypeParser.js:207:14[90m)[39m
    at Parser.defaultJsonParser [as fn] [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/contentTypeParser.js:312:7[90m)[39m
        # Subtest: POST `/tournaments` returns 400 when creating tournament with invalid player
            ok 1 - Status code 400
            ok 2 - should be equal
            1..2
        ok 4 - POST `/tournaments` returns 400 when creating tournament with invalid player # time=4.198ms
        
{"level":30,"time":1746643235946,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-31","res":{"statusCode":400},"responseTime":1.5739917755126953,"msg":"request completed"}
{"level":40,"time":1746643235947,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-31","err":{"type":"FastifyError","message":"Reply was already sent, did you forget to \"return reply\" in \"/tournaments\" (POST)?","stack":"FastifyError: Reply was already sent, did you forget to \"return reply\" in \"/tournaments\" (POST)?\n    at Reply.send (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:134:26)\n    at Object.createTournament (file:///home/vvaalant/Documents/ring7/new2/backend/controllers/tournamentController.js:243:32)\n    at preHandlerCallbackInner (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:161:24)\n    at preHandlerCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:129:5)\n    at validationCompleted (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:119:5)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:96:5)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)","code":"FST_ERR_REP_ALREADY_SENT","name":"FastifyError","statusCode":500},"msg":"Reply was already sent, did you forget to \"return reply\" in \"/tournaments\" (POST)?"}
{"level":30,"time":1746643235949,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-32","req":{"method":"POST","url":"/tournaments","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: POST `/tournaments` returns 400 when missing player_ids
            ok 1 - Status code 400
            ok 2 - should be equal
            1..2
        ok 5 - POST `/tournaments` returns 400 when missing player_ids # time=1.493ms
        
{"level":30,"time":1746643235950,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-32","res":{"statusCode":400},"err":{"type":"Error","message":"body/player_ids must NOT have fewer than 3 items","stack":"Error: body/player_ids must NOT have fewer than 3 items\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"/player_ids","schemaPath":"#/properties/player_ids/minItems","keyword":"minItems","params":{"limit":3},"message":"must NOT have fewer than 3 items"}],"validationContext":"body"},"msg":"body/player_ids must NOT have fewer than 3 items"}
{"level":30,"time":1746643235950,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-32","res":{"statusCode":400},"responseTime":0.6437454223632812,"msg":"request completed"}
{"level":30,"time":1746643235951,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-33","req":{"method":"POST","url":"/tournaments","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
        # Subtest: POST `/tournaments` returns 400 when missing name
            ok 1 - Status code 400
            ok 2 - should be equal
            1..2
        ok 6 - POST `/tournaments` returns 400 when missing name # time=1.382ms
        
{"level":30,"time":1746643235951,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-33","res":{"statusCode":400},"err":{"type":"Error","message":"body must have required property 'name'","stack":"Error: body must have required property 'name'\n    at defaultSchemaErrorFormatter (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/context.js:92:10)\n    at wrapValidationError (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:249:17)\n    at validate (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/validation.js:167:16)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:89:25)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)\n    at Parser.defaultJsonParser [as fn] (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:312:7)\n    at Request.onEnd (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:296:27)","statusCode":400,"code":"FST_ERR_VALIDATION","validation":[{"instancePath":"","schemaPath":"#/required","keyword":"required","params":{"missingProperty":"name"},"message":"must have required property 'name'"}],"validationContext":"body"},"msg":"body must have required property 'name'"}
{"level":30,"time":1746643235952,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-33","res":{"statusCode":400},"responseTime":0.6134176254272461,"msg":"request completed"}
{"level":30,"time":1746643235953,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-34","req":{"method":"POST","url":"/tournaments","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
BEGIN
SELECT * FROM tournaments WHERE name = 'T1'
SELECT * FROM players WHERE id = 1.0
SELECT * FROM players WHERE id = 2.0
SELECT * FROM players WHERE id = 3.0
INSERT INTO tournaments (name, user_id) VALUES ('T1', 2.0)
INSERT INTO match_history (type, tournament_id, round, user_id) VALUES ('tournament', 1.0, 0.0, 2.0)
INSERT INTO match_player_history (match_id, player_id) VALUES (1.0, 1.0)
INSERT INTO match_player_history (match_id, player_id) VALUES (1.0, 2.0)
INSERT INTO match_history (type, tournament_id, round, user_id) VALUES ('tournament', 1.0, 0.0, 2.0)
INSERT INTO match_player_history (match_id, player_id) VALUES (2.0, 3.0)
INSERT INTO match_winner_history (match_id, winner_id) VALUES (2.0, 3.0)

    SELECT
        t.id AS tournament_id,
        t.name,
        t.status,
        t.current_round,
        t.winner_id,
        mh.id as match_id,
        mh.type,
        mh.round,
        mh.date,
        COALESCE(
            (
                SELECT json_group_array(
                    json_object(
                        'player_id', mph.player_id,
                        'score', mph.score
                    )
                )
                FROM match_player_history mph
                WHERE mph.match_id = mh.id
            ), '[]'
        ) AS players
    FROM match_history mh
    JOIN tournaments t ON t.id = mh.tournament_id
    WHERE t.id = 1.0

COMMIT
        # Subtest: POST `/tournaments` returns 200 when creating tournament with 3 players
            ok 1 - Status code 200
            ok 2 - should be equal
            ok 3 - should be equivalent
BEGIN
SELECT * FROM tournaments WHERE id = 1.0 AND user_id = 2.0
SELECT * FROM match_history WHERE tournament_id = 1.0 AND round = 0.0
SELECT * FROM match_winner_history WHERE match_id = 1.0
ROLLBACK
            # Subtest: PUT `/tournaments/:id` returns 404 when match not played
                ok 1 - Status code 404
                ok 2 - should be equal
                1..2
            ok 4 - PUT `/tournaments/:id` returns 404 when match not played # time=2.941ms
            
{"level":30,"time":1746643235960,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-34","res":{"statusCode":200},"responseTime":6.889464378356934,"msg":"request completed"}
{"level":30,"time":1746643235962,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-35","req":{"method":"PUT","url":"/tournaments/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235963,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-35","res":{"statusCode":404},"responseTime":1.6712732315063477,"msg":"request completed"}
{"level":30,"time":1746643235965,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-36","req":{"method":"PUT","url":"/match-histories/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM match_history WHERE id = 1.0 AND user_id = 2.0
BEGIN
SELECT * FROM match_player_history WHERE match_id = 1.0 AND player_id = 1.0

        UPDATE match_player_history SET score = 2.0 WHERE match_id = 1.0 AND player_id = 1.0
    
UPDATE players SET losses = losses + 1 WHERE id = 1.0
SELECT * FROM match_player_history WHERE match_id = 1.0 AND player_id = 2.0

        UPDATE match_player_history SET score = 5.0 WHERE match_id = 1.0 AND player_id = 2.0
    
SELECT * FROM match_winner_history WHERE match_id = 1.0 AND winner_id = 2.0
INSERT INTO match_winner_history (match_id, winner_id) VALUES (1.0, 2.0)
UPDATE players SET wins = wins + 1 WHERE id = 2.0
COMMIT
            # Subtest: PUT `/tournaments/:id` returns 200 on success
                ok 1 - Status code 200
BEGIN
SELECT * FROM tournaments WHERE id = 1.0 AND user_id = 2.0
SELECT * FROM match_history WHERE tournament_id = 1.0 AND round = 0.0
SELECT * FROM match_winner_history WHERE match_id = 1.0
SELECT * FROM match_winner_history WHERE match_id = 2.0
INSERT INTO match_history (type, tournament_id, round, user_id) VALUES ('tournament', 1.0, 1.0, 2.0)
INSERT INTO match_player_history (match_id, player_id) VALUES (3.0, 3.0)
INSERT INTO match_player_history (match_id, player_id) VALUES (3.0, 2.0)
UPDATE tournaments SET current_round = current_round + 1 WHERE id = 1.0

    SELECT
        t.id AS tournament_id,
        t.name,
        t.status,
        t.current_round,
        t.winner_id,
        mh.id as match_id,
        mh.type,
        mh.round,
        mh.date,
        COALESCE(
            (
                SELECT json_group_array(
                    json_object(
                        'player_id', mph.player_id,
                        'score', mph.score
                    )
                )
                FROM match_player_history mph
                WHERE mph.match_id = mh.id
            ), '[]'
        ) AS players
    FROM match_history mh
    JOIN tournaments t ON t.id = mh.tournament_id
    WHERE t.id = 1.0

COMMIT
                ok 2 - Status code 200
                ok 3 - should be equal
                ok 4 - should be equivalent
BEGIN
SELECT * FROM tournaments WHERE id = 1.0 AND user_id = 1.0
ROLLBACK
                # Subtest: PUT `/tournaments/:id` returns 404 unauthorized
                    ok 1 - Status code 404
                    ok 2 - should be equal
                    1..2
                ok 5 - PUT `/tournaments/:id` returns 404 unauthorized # time=2.395ms
                
{"level":30,"time":1746643235971,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-36","res":{"statusCode":200},"responseTime":5.937925338745117,"msg":"request completed"}
{"level":30,"time":1746643235971,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-37","req":{"method":"PUT","url":"/tournaments/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235977,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-37","res":{"statusCode":200},"responseTime":6.242033958435059,"msg":"request completed"}
{"level":30,"time":1746643235979,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-38","req":{"method":"PUT","url":"/tournaments/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643235980,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-38","res":{"statusCode":404},"responseTime":0.9133901596069336,"msg":"request completed"}
{"level":30,"time":1746643235982,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-39","req":{"method":"PUT","url":"/match-histories/3","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
SELECT * FROM match_history WHERE id = 3.0 AND user_id = 2.0
BEGIN
SELECT * FROM match_player_history WHERE match_id = 3.0 AND player_id = 2.0

        UPDATE match_player_history SET score = 2.0 WHERE match_id = 3.0 AND player_id = 2.0
    
SELECT * FROM match_player_history WHERE match_id = 3.0 AND player_id = 3.0

        UPDATE match_player_history SET score = 1.0 WHERE match_id = 3.0 AND player_id = 3.0
    
UPDATE players SET losses = losses + 1 WHERE id = 3.0
SELECT * FROM match_winner_history WHERE match_id = 3.0 AND winner_id = 2.0
INSERT INTO match_winner_history (match_id, winner_id) VALUES (3.0, 2.0)
UPDATE players SET wins = wins + 1 WHERE id = 2.0
COMMIT
                # Subtest: PUT `/tournaments/:id` returns 200 on tournament finish
                    ok 1 - Status code 200
BEGIN
SELECT * FROM tournaments WHERE id = 1.0 AND user_id = 2.0
SELECT * FROM match_history WHERE tournament_id = 1.0 AND round = 1.0
SELECT * FROM match_winner_history WHERE match_id = 3.0
UPDATE tournaments SET status = 'finished', winner_id = 2.0, current_round = 2.0 WHERE id = 1.0

    SELECT
        t.id AS tournament_id,
        t.name,
        t.status,
        t.current_round,
        t.winner_id,
        mh.id as match_id,
        mh.type,
        mh.round,
        mh.date,
        COALESCE(
            (
                SELECT json_group_array(
                    json_object(
                        'player_id', mph.player_id,
                        'score', mph.score
                    )
                )
                FROM match_player_history mph
                WHERE mph.match_id = mh.id
            ), '[]'
        ) AS players
    FROM match_history mh
    JOIN tournaments t ON t.id = mh.tournament_id
    WHERE t.id = 1.0

COMMIT
SELECT display_name FROM players WHERE id = 2.0

        SELECT DISTINCT p.display_name
        FROM players p
          JOIN match_player_history mph ON mph.player_id = p.id
          JOIN match_history mh ON mh.id = mph.match_id
        WHERE mh.tournament_id = 1.0
{"level":30,"time":1746643235989,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-39","res":{"statusCode":200},"responseTime":6.8085527420043945,"msg":"request completed"}
{"level":30,"time":1746643235989,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3a","req":{"method":"PUT","url":"/tournaments/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
Scores from blockchain: [
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Alice'[39m, [32m'Bob'[39m ],
    winner: [32m'Alice'[39m,
    timestamp: [33m1744637226[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Valle'[39m, [32m'Miyuki'[39m ],
    winner: [32m'Valle'[39m,
    timestamp: [33m1744637293[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Valle'[39m, [32m'Miyuki'[39m ],
    winner: [32m'Valle'[39m,
    timestamp: [33m1744639472[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Valle'[39m, [32m'Miyuki'[39m ],
    winner: [32m'Valle'[39m,
    timestamp: [33m1744639586[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Valle'[39m, [32m'Kim'[39m, [32m'Oliver'[39m, [32m'Miyuki'[39m, [32m'Lumi'[39m ],
    winner: [32m'Valle'[39m,
    timestamp: [33m1745851055[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Player2'[39m, [32m'Player3'[39m ],
    winner: [32m'Player1'[39m,
    timestamp: [33m1746551255[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Player1'[39m, [32m'Player2'[39m, [32m'Player3'[39m ],
    winner: [32m'Player2'[39m,
    timestamp: [33m1746553767[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Player2'[39m, [32m'Player3'[39m, [32m'Player1'[39m ],
    winner: [32m'Player1'[39m,
    timestamp: [33m1746553791[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Player1'[39m, [32m'Player2'[39m, [32m'Player3'[39m ],
    winner: [32m'Player2'[39m,
    timestamp: [33m1746553986[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Player2'[39m, [32m'Player3'[39m, [32m'Player1'[39m ],
    winner: [32m'Player1'[39m,
    timestamp: [33m1746554230[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Player1'[39m, [32m'Player2'[39m, [32m'Player3'[39m ],
    winner: [32m'Player2'[39m,
    timestamp: [33m1746554324[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Player1'[39m, [32m'Player3'[39m, [32m'Player2'[39m ],
    winner: [32m'Player2'[39m,
    timestamp: [33m1746554558[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Playeri2'[39m, [32m'Playeri3'[39m, [32m'Playeri1'[39m ],
    winner: [32m'Playeri1'[39m,
    timestamp: [33m1746554703[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Player1'[39m, [32m'Player2'[39m, [32m'Player3'[39m ],
    winner: [32m'Player2'[39m,
    timestamp: [33m1746631141[39m
  },
  {
    tournamentId: [33m1[39m,
    players: [ [32m'Player1'[39m, [32m'Player2'[39m, [32m'Player3'[39m ],
    winner: [32m'Player2'[39m,
    timestamp: [33m1746643238[39m
  }
]
Transaction hash: 0x99f64a76a08f34b78163cc18c72a969ba3349b7c4cd2be6a5bbce7ae5a40de95
{"level":30,"time":1746643242283,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3a","res":{"statusCode":200},"responseTime":6293.432868003845,"msg":"request completed"}
                    ok 2 - Status code 200
                    ok 3 - should be equal
                    1..3
                ok 6 - PUT `/tournaments/:id` returns 200 on tournament finish # time=6301.923ms
                
BEGIN
SELECT * FROM tournaments WHERE id = 1.0 AND user_id = 2.0
ROLLBACK
                # Subtest: PUT `/tournaments/:id` returns 400 when already finished
                    ok 1 - Status code 400
                    ok 2 - should be equal
                    1..2
                ok 7 - PUT `/tournaments/:id` returns 400 when already finished # time=1.881ms
                
                1..7
            ok 5 - PUT `/tournaments/:id` returns 200 on success # time=6322.219ms
            
            1..5
        ok 7 - POST `/tournaments` returns 200 when creating tournament with 3 players # time=6334.421ms
        
BEGIN
SELECT * FROM tournaments WHERE name = 'T1'
COMMIT
TypeError: Cannot destructure property 'tournament_id' of 'rows[0]' as it is undefined.
    at Object.createTournament [90m(file:///home/vvaalant/Documents/ring7/new2/backend/[39mcontrollers/tournamentController.js:220:17[90m)[39m
    at preHandlerCallbackInner [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:161:24[90m)[39m
    at preHandlerCallback [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:129:5[90m)[39m
    at validationCompleted [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:119:5[90m)[39m
    at preValidationCallback [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:96:5[90m)[39m
    at handler [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/handleRequest.js:73:7[90m)[39m
    at [90m/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/contentTypeParser.js:214:9
[90m    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)[39m
    at done [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/contentTypeParser.js:207:14[90m)[39m
    at Parser.defaultJsonParser [as fn] [90m(/home/vvaalant/Documents/ring7/new2/backend/[39mnode_modules/[4mfastify[24m/lib/contentTypeParser.js:312:7[90m)[39m
        # Subtest: POST `/tournaments` returns 400 on duplicate name
            ok 1 - Status code 400
            ok 2 - should be equal
            1..2
        ok 8 - POST `/tournaments` returns 400 on duplicate name # time=2.764ms
        

    SELECT
        t.id AS tournament_id,
        t.name,
        t.status,
        t.current_round,
        t.winner_id,
        mh.id as match_id,
        mh.type,
        mh.round,
        mh.date,
        COALESCE(
            (
                SELECT json_group_array(
                    json_object(
                        'player_id', mph.player_id,
                        'score', mph.score
                    )
                )
                FROM match_player_history mph
                WHERE mph.match_id = mh.id
            ), '[]'
        ) AS players
    FROM match_history mh
    JOIN tournaments t ON t.id = mh.tournament_id
    WHERE t.id = 10.0

        # Subtest: GET `/tournaments/:id` returns 404 if tournament not found
            ok 1 - Status code 404
            ok 2 - should be equal
            1..2
        ok 9 - GET `/tournaments/:id` returns 404 if tournament not found # time=1.57ms
        

    SELECT
        t.id AS tournament_id,
        t.name,
        t.status,
        t.current_round,
        t.winner_id,
        mh.id as match_id,
        mh.type,
        mh.round,
        mh.date,
        COALESCE(
            (
                SELECT json_group_array(
                    json_object(
                        'player_id', mph.player_id,
                        'score', mph.score
                    )
                )
                FROM match_player_history mph
                WHERE mph.match_id = mh.id
            ), '[]'
        ) AS players
    FROM match_history mh
    JOIN tournaments t ON t.id = mh.tournament_id
    WHERE t.id = 1.0

        # Subtest: GET `/tournaments/:id` returns 200 on success
            ok 1 - Status code 200
            1..1
        ok 10 - GET `/tournaments/:id` returns 200 on success # time=1.786ms
        
DELETE FROM tournaments WHERE id = 1.0 and user_id = 1.0
        # Subtest: DELETE `/tournaments/:id` returns 404 unauthorized
            ok 1 - Status code 404
            ok 2 - should be equal
            1..2
        ok 11 - DELETE `/tournaments/:id` returns 404 unauthorized # time=1.974ms
        
DELETE FROM tournaments WHERE id = 1.0 and user_id = 2.0
        # Subtest: DELETE `/tournaments/:id` returns 200 on success
            ok 1 - Status code 200
            ok 2 - should be equal
            1..2
        ok 12 - DELETE `/tournaments/:id` returns 200 on success # time=11.127ms
        
        1..12
    ok 7 - POST `/login` - Login as kim # time=6681.461ms
    
    1..7
🧹 testPong.db wiped clean for next test
not ok 1 - All Test # time=9236.65ms
  ---
  at:
    fileName: tests/index.test.js
    lineNumber: 12
    columnNumber: 3
    isToplevel: true
  source: |
    import runTournamentTests from './tournament.test.js';
  
    t.test('All Test', async (t) => {
    --^
        const app = buildApp();
        await app.ready();
  ...

{"level":30,"time":1746643242285,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3b","req":{"method":"PUT","url":"/tournaments/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643242285,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3b","res":{"statusCode":400},"responseTime":0.8773298263549805,"msg":"request completed"}
{"level":30,"time":1746643242288,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3c","req":{"method":"POST","url":"/tournaments","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643242288,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3c","res":{"statusCode":400},"responseTime":0.907404899597168,"msg":"request completed"}
{"level":40,"time":1746643242289,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3c","err":{"type":"FastifyError","message":"Reply was already sent, did you forget to \"return reply\" in \"/tournaments\" (POST)?","stack":"FastifyError: Reply was already sent, did you forget to \"return reply\" in \"/tournaments\" (POST)?\n    at Reply.send (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/reply.js:134:26)\n    at Object.createTournament (file:///home/vvaalant/Documents/ring7/new2/backend/controllers/tournamentController.js:243:32)\n    at preHandlerCallbackInner (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:161:24)\n    at preHandlerCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:129:5)\n    at validationCompleted (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:119:5)\n    at preValidationCallback (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:96:5)\n    at handler (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/handleRequest.js:73:7)\n    at /home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:214:9\n    at AsyncResource.runInAsyncScope (node:async_hooks:211:14)\n    at done (/home/vvaalant/Documents/ring7/new2/backend/node_modules/fastify/lib/contentTypeParser.js:207:14)","code":"FST_ERR_REP_ALREADY_SENT","name":"FastifyError","statusCode":500},"msg":"Reply was already sent, did you forget to \"return reply\" in \"/tournaments\" (POST)?"}
{"level":30,"time":1746643242290,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3d","req":{"method":"GET","url":"/tournaments/10","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643242291,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3d","res":{"statusCode":404},"responseTime":0.6830615997314453,"msg":"request completed"}
{"level":30,"time":1746643242292,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3e","req":{"method":"GET","url":"/tournaments/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643242293,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3e","res":{"statusCode":200},"responseTime":0.8185901641845703,"msg":"request completed"}
{"level":30,"time":1746643242294,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3f","req":{"method":"DELETE","url":"/tournaments/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643242295,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3f","res":{"statusCode":404},"responseTime":0.9872026443481445,"msg":"request completed"}
{"level":30,"time":1746643242297,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3g","req":{"method":"DELETE","url":"/tournaments/1","host":"localhost:80","remoteAddress":"127.0.0.1"},"msg":"incoming request"}
{"level":30,"time":1746643242307,"pid":2283240,"hostname":"c1r4p8.hive.fi","reqId":"req-3g","res":{"statusCode":200},"responseTime":10.134263038635254,"msg":"request completed"}
1..1
